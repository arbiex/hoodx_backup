const WebSocket = require('ws');

const RAILWAY_WS_URL = 'wss://websocket-blaze-production.up.railway.app';
const USER_ID = 'test-pragmatic-' + Date.now();

console.log('üß™ TESTE ESPEC√çFICO: Railway ‚Üí Pragmatic Play');
console.log('='.repeat(60));
console.log(`üì° Conectando em: ${RAILWAY_WS_URL}?userId=${USER_ID}`);

const ws = new WebSocket(`${RAILWAY_WS_URL}?userId=${USER_ID}`);

let startTime = Date.now();
let railwayConnected = false;
let pragmaticConnected = false;
let receivedWelcome = false;

// Monitorar eventos de conex√£o
ws.on('open', function open() {
  console.log('‚úÖ RAILWAY: Conectado ao servidor Railway');
  railwayConnected = true;
  console.log('‚è±Ô∏è Aguardando auto-inicializa√ß√£o do monitoramento...');
});

ws.on('message', function message(data) {
  try {
    const message = JSON.parse(data.toString());
    const timestamp = new Date().toLocaleTimeString('pt-BR');
    
    console.log(`[${timestamp}] üì® Mensagem recebida:`, {
      type: message.type,
      message: message.message?.substring(0, 100) || 'N/A'
    });
    
    // Analisar mensagens espec√≠ficas
    switch (message.type) {
      case 'welcome':
        receivedWelcome = true;
        console.log('üëã WELCOME: Recebido do Railway');
        break;
        
      case 'pragmatic_connected':
        pragmaticConnected = true;
        console.log('üéâ PRAGMATIC CONECTADO! ‚úÖ');
        break;
        
      case 'pragmatic_error':
        console.log('‚ùå ERRO PRAGMATIC:', message.error);
        analyzePragmaticError(message.error);
        break;
        
      case 'authentication_success':
        console.log('üîë AUTENTICA√á√ÉO: Sucesso');
        console.log('   - JSESSIONID obtido');
        break;
        
      case 'authentication_error':
        console.log('‚ùå AUTENTICA√á√ÉO: Falhou');
        console.log('   - Problema na Edge Function do Supabase');
        break;
        
      case 'game_result':
        console.log('üéØ JOGO: Resultado recebido do Pragmatic!');
        console.log('   - Number:', message.data?.number);
        console.log('   - Color:', message.data?.color);
        break;
        
      case 'monitoring_started':
        console.log('üëÄ MONITORAMENTO: Iniciado');
        break;
        
      case 'error':
        console.log('‚ö†Ô∏è ERRO GERAL:', message.message);
        break;
        
      default:
        console.log(`üìã OUTRO: ${message.type}`);
    }
    
  } catch (error) {
    console.log(`[${new Date().toLocaleTimeString('pt-BR')}] üìÑ Mensagem n√£o-JSON:`, data.toString());
  }
});

ws.on('error', function error(err) {
  console.log('‚ùå ERRO WEBSOCKET:', err.message);
});

ws.on('close', function close(code, reason) {
  const duration = ((Date.now() - startTime) / 1000).toFixed(2);
  
  console.log('\n' + '='.repeat(60));
  console.log('üö™ CONEX√ÉO FECHADA');
  console.log('='.repeat(60));
  console.log(`‚è∞ Dura√ß√£o: ${duration}s`);
  console.log(`üî¢ C√≥digo: ${code}`);
  console.log(`üìù Raz√£o: ${reason || 'N/A'}`);
  
  console.log('\nüìä RELAT√ìRIO FINAL:');
  console.log(`‚úÖ Railway Conectado: ${railwayConnected ? '‚úÖ' : '‚ùå'}`);
  console.log(`üëã Welcome Recebido: ${receivedWelcome ? '‚úÖ' : '‚ùå'}`);
  console.log(`üéØ Pragmatic Conectado: ${pragmaticConnected ? '‚úÖ' : '‚ùå'}`);
  
  if (railwayConnected && !pragmaticConnected) {
    console.log('\nüîç DIAGN√ìSTICO:');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('‚úÖ Frontend ‚Üí Railway: OK');
    console.log('‚ùå Railway ‚Üí Pragmatic: PROBLEMA');
    console.log('');
    console.log('üõ†Ô∏è POSS√çVEIS CAUSAS:');
    console.log('  1. Edge Function Supabase n√£o est√° funcionando');
    console.log('  2. JSESSIONID inv√°lido ou expirado');
    console.log('  3. URL do WebSocket Pragmatic incorreta');
    console.log('  4. Pragmatic Play bloqueando conex√µes');
    console.log('  5. Vari√°veis de ambiente SUPABASE n√£o configuradas');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  }
});

function analyzePragmaticError(error) {
  console.log('\nüîç AN√ÅLISE DO ERRO PRAGMATIC:');
  console.log('‚îÅ'.repeat(40));
  
  if (error.includes('authentication')) {
    console.log('üîë PROBLEMA DE AUTENTICA√á√ÉO');
    console.log('   - Verificar Edge Function do Supabase');
    console.log('   - Verificar vari√°veis SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY');
  } else if (error.includes('timeout')) {
    console.log('‚è∞ TIMEOUT');
    console.log('   - Pragmatic Play n√£o respondeu a tempo');
    console.log('   - Poss√≠vel problema de rede');
  } else if (error.includes('WebSocket')) {
    console.log('üîå PROBLEMA WEBSOCKET');
    console.log('   - URL pode estar incorreta');
    console.log('   - JSESSIONID pode estar inv√°lido');
  } else {
    console.log('‚ùì ERRO DESCONHECIDO');
    console.log('   - Verificar logs do servidor Railway');
  }
  
  console.log('‚îÅ'.repeat(40));
}

// Fechar ap√≥s 2 minutos para an√°lise
setTimeout(() => {
  console.log('\n‚è∞ Tempo limite atingido (2 minutos)');
  ws.close();
}, 120000);

console.log('‚è±Ô∏è Teste rodar√° por 2 minutos...');
console.log('üîç Monitorando especificamente a conex√£o Railway ‚Üí Pragmatic Play');
console.log(''); 