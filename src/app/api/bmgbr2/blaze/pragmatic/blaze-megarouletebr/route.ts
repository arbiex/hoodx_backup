import { NextRequest, NextResponse } from 'next/server';
import WebSocket from 'ws';
import { createClient } from '@supabase/supabase-js';
import { 
  AuthResult,
  getUserBlazeToken,
  validateClientTokens,
  debugAuth
} from '../auth';
import { getBaseUrl } from '@/lib/utils';

interface MegaRouletteConfig {
  userId: string;
  action?: 'bet-connect' | 'start-operation' | 'stop-operation' | 'get-websocket-logs' | 'get-operation-report' | 'reset-operation-report' | 'get-connection-status' | 'server-diagnostic' | 'get-sessions-history' | 'blaze-proxy' | 'pragmatic-proxy' | 'debug-auth' | 'get-blaze-token' | 'frontend-auth' | 'generate-client-tokens' | 'update-strategy' | 'update-stake' | 'update-bet-type' | 'force-check-api-results' | 'set-pending-stake' | 'update-auto-progression';
  forceClientSideAuth?: boolean;
  blazeToken?: string;
  selectedCurrencyType?: string;
  userAgent?: string;
  acceptLanguage?: string;
  realBrowserHeaders?: any;
  params?: string;
  userFingerprint?: any;
  testType?: string;
  // M4 Direto par√¢metros
  m4DirectBetType?: 'await' | 'red' | 'black' | 'even' | 'odd' | 'low' | 'high';
}

interface SimpleConfig {
  userId: string;
  action: string;
}

const websocketLogs: { [userId: string]: Array<{ timestamp: number; message: string; type: 'info' | 'error' | 'success' | 'game' | 'bets-open' | 'bets-closed' }> } = {};
const connectionStatus: { [userId: string]: { connected: boolean; error?: string; lastUpdate: number } } = {};

const gameResults: { [userId: string]: Array<{ number: number; color: string; gameId: string; timestamp: number }> } = {};

// üî• SIMPLIFICADO: Estado da opera√ß√£o focado apenas no M4 Direto
const operationState: { [userId: string]: {
  active: boolean; 
  martingaleLevel: number;
  waitingForResult: boolean;
  lastGameId?: string;
  currentBetColor?: 'R' | 'B' | 'E' | 'O' | 'L' | 'H' | 'AWAIT';
  lastBetAmount?: number; // ‚úÖ NOVO: Armazenar valor real da √∫ltima aposta
  
  strategy: {
    sequences: number[];
    maxMartingale: number;
  };
  stats: {
    totalBets: number;
    wins: number;
    losses: number;
    profit: number;
    startedAt: number;
  };
  // Tipo de aposta para modo M4 direto
  m4DirectBetType?: 'await' | 'red' | 'black' | 'even' | 'odd' | 'low' | 'high';
  // üéØ NOVO: Campo para stake pendente
  pendingStake?: number | null;
  // üîÑ NOVO: Controle de polling da URL/API
  lastProcessedGameId?: string;
  apiPollingInterval?: NodeJS.Timeout;
  // üéØ NOVO: Controle de miss√£o cumprida
  missionCompleted?: boolean;
  // üöÄ NOVO: Progress√£o autom√°tica de stake
  autoProgressionEnabled?: boolean;
  initialStakeIndex?: number; // √çndice inicial para voltar ap√≥s vit√≥ria
  currentStakeIndex?: number; // √çndice atual da evolu√ß√£o
} } = {};

const activeWebSockets: { [userId: string]: {
  ws: any;
  sessionId: string;
  createdAt: number;
  lastActivity: number;
} } = {};

const sessionControl: { [userId: string]: {
  jsessionId: string;
  ppToken: string;
  pragmaticUserId: string;
  createdAt: number;
  lastRenewal: number;
  renewalAttempts: number;
  maxRenewalAttempts: number;
} } = {};

const autoRenewalIntervals: { [userId: string]: NodeJS.Timeout } = {};

const reconnectionControl: { [userId: string]: {
  attempts: number;
  lastAttempt: number;
  maxAttempts: number;
  backoffDelay: number;
} } = {};

const isFirstConnection: { [userId: string]: boolean } = {};

const bettingWindowState: { [userId: string]: {
  isOpen: boolean;
  currentGameId?: string;
  lastUpdate: number;
} } = {};

// üöÄ REMOVIDO: Estado global para progress√£o autom√°tica - funcionalidade removida

// ‚úÖ NOVO: Tracking da primeira aposta realizada ap√≥s conex√£o
const firstBetTimestamp: { [userId: string]: number | null } = {};

// üöÄ NOVO: Flag para controlar se deve tentar apostar imediatamente quando conectar
const shouldTryImmediateBet: { [userId: string]: boolean } = {};

// üîÑ NOVO: Controle para evitar logs repetitivos do modo aguardar
const awaitModeLogShown: { [userId: string]: boolean } = {};

// üî• SIMPLIFICADO: Hist√≥rico detalhado apenas para modo real
const detailedHistory: { [userId: string]: Array<{
  id: string;
  timestamp: number;
  martingaleLevel: number;
  betColor: 'R' | 'B' | 'E' | 'O' | 'L' | 'H' | 'AWAIT';
  resultColor: string;
  resultNumber: number;
  gameId: string;
  isWin: boolean;
  betAmount: number;
  profit: number;
  sequencePosition: string;
}> } = {};

const reconnectionTimers: { [userId: string]: NodeJS.Timeout } = {};

function addDetailedHistoryEntry(userId: string, entry: {
  martingaleLevel: number;
  betColor: 'R' | 'B' | 'E' | 'O' | 'L' | 'H' | 'AWAIT';
  resultColor: string;
  resultNumber: number;
  gameId: string;
  isWin: boolean;
  betAmount: number;
}) {
  if (!detailedHistory[userId]) {
    detailedHistory[userId] = [];
  }
  
  const profit = entry.isWin ? entry.betAmount : -entry.betAmount;
  const sequencePosition = `M${entry.martingaleLevel + 1}`;
  
  const historyEntry = {
    id: `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    timestamp: Date.now(),
    martingaleLevel: entry.martingaleLevel,
    betColor: entry.betColor,
    resultColor: entry.resultColor,
    resultNumber: entry.resultNumber,
    gameId: entry.gameId,
    isWin: entry.isWin,
    betAmount: entry.betAmount,
    profit: profit,
    sequencePosition: sequencePosition
  };
  
  detailedHistory[userId].push(historyEntry);
  
  if (detailedHistory[userId].length > 1000) {
    detailedHistory[userId] = detailedHistory[userId].slice(-1000);
  }
  
  // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üìã Entrada adicionada ao hist√≥rico: ${sequencePosition} ${entry.isWin ? 'WIN' : 'LOSS'}`, 'info');
}

function resetDetailedHistory(userId: string) {
  detailedHistory[userId] = [];
  // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üìã Hist√≥rico detalhado resetado`, 'info');
}

function getDetailedHistory(userId: string) {
  return detailedHistory[userId] || [];
}

function updateLastHistoryEntryNumber(userId: string, resultNumber: number, gameId: string) {
  if (!detailedHistory[userId] || detailedHistory[userId].length === 0) {
    return;
  }
  
  const lastEntry = detailedHistory[userId][detailedHistory[userId].length - 1];
  
  if (lastEntry.gameId === gameId && (lastEntry.resultColor === 'pending' || lastEntry.resultColor === 'sent')) {
    lastEntry.resultNumber = resultNumber;
    lastEntry.gameId = gameId;
    
    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üìã N√∫mero do resultado atualizado no hist√≥rico: ${resultNumber}`, 'info');
  }
}

// Sistema de humaniza√ß√£o removido

// üí∞ 40 Evolu√ß√µes de Stake predefinidas com M1 e M2 - Backend
const STAKE_EVOLUTIONS = [
  { id: 1, m1: 1.00, m2: 2.00 },
  { id: 2, m1: 1.00, m2: 3.00 },
  { id: 3, m1: 2.00, m2: 4.00 },
  { id: 4, m1: 3.00, m2: 5.00 },
  { id: 5, m1: 4.00, m2: 6.00 },
  { id: 6, m1: 5.00, m2: 9.00 },
  { id: 7, m1: 6.00, m2: 13.00 },
  { id: 8, m1: 7.00, m2: 18.00 },
  { id: 9, m1: 8.00, m2: 24.00 },
  { id: 10, m1: 9.00, m2: 31.00 },
  { id: 11, m1: 10.00, m2: 39.00 },
  { id: 12, m1: 11.00, m2: 48.00 },
  { id: 13, m1: 12.00, m2: 58.00 },
  { id: 14, m1: 13.00, m2: 69.00 },
  { id: 15, m1: 14.00, m2: 81.00 },
  { id: 16, m1: 15.00, m2: 94.00 },
  { id: 17, m1: 16.00, m2: 108.00 },
  { id: 18, m1: 17.00, m2: 123.00 },
  { id: 19, m1: 18.00, m2: 139.00 },
  { id: 20, m1: 19.00, m2: 156.00 },
  { id: 21, m1: 20.00, m2: 174.00 },
  { id: 22, m1: 21.00, m2: 193.00 },
  { id: 23, m1: 22.00, m2: 213.00 },
  { id: 24, m1: 23.00, m2: 234.00 },
  { id: 25, m1: 24.00, m2: 256.00 },
  { id: 26, m1: 25.00, m2: 279.00 },
  { id: 27, m1: 26.00, m2: 303.00 },
  { id: 28, m1: 27.00, m2: 328.00 },
  { id: 29, m1: 28.00, m2: 354.00 },
  { id: 30, m1: 29.00, m2: 381.00 },
  { id: 31, m1: 30.00, m2: 409.00 },
  { id: 32, m1: 31.00, m2: 439.00 },
  { id: 33, m1: 32.00, m2: 470.00 },
  { id: 34, m1: 33.00, m2: 502.00 },
  { id: 35, m1: 34.00, m2: 535.00 },
  { id: 36, m1: 35.00, m2: 569.00 },
  { id: 37, m1: 36.00, m2: 604.00 },
  { id: 38, m1: 37.00, m2: 640.00 },
  { id: 39, m1: 38.00, m2: 677.00 },
  { id: 40, m1: 39.00, m2: 715.00 }
];

// Fun√ß√µes de sess√£o simplificadas (removidas - n√£o essenciais)

// Fun√ß√£o principal POST
export async function POST(request: NextRequest) {
  try {
    // üíæ LIMPEZA: Limpar backups expirados periodicamente
    // Removido: limpeza simplificada

    // ‚úÖ MELHORADO: Capturar dados completos do cliente
    const clientIP = 
      request.headers.get('x-forwarded-for')?.split(',')[0]?.trim() ||
      request.headers.get('x-real-ip') ||
      request.headers.get('cf-connecting-ip') ||
      request.headers.get('x-client-ip') ||
      'unknown';

    // ‚úÖ NOVO: Capturar headers reais do navegador
    const clientUserAgent = request.headers.get('user-agent') || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36';
    const clientLanguage = request.headers.get('accept-language') || 'pt-BR,pt;q=0.9,en;q=0.8';
    const clientAccept = request.headers.get('accept') || 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8';
    const clientAcceptEncoding = request.headers.get('accept-encoding') || 'gzip, deflate, br';
    const clientReferer = request.headers.get('referer') || 'https://blaze.bet.br/';

    let requestBody;
    try {
      requestBody = await request.json();
    } catch (jsonError) {
      return NextResponse.json({
        success: false,
        error: 'Dados da requisi√ß√£o inv√°lidos - JSON malformado'
      }, { status: 400 });
    }

    const { 
      userId, 
      action = 'bet-connect', 
      tipValue, 
      userFingerprint, 
      clientHeaders, 
      clientMetadata, 
      authTokens, 
      forceClientSideAuth,
      // Novos campos para funcionalidades consolidadas
      blazeToken,
      selectedCurrencyType,
      userAgent,
      acceptLanguage,
      realBrowserHeaders,
      params,
      testType,
      // üí∞ NOVO: Campos para sequ√™ncia personalizada
      customMartingaleSequence,
      stakeBased,
      // Novos campos para estrat√©gia 'Break-Even Estrat√©gico'
      breakEvenStrategy,
      // üî• NOVO: Campo para M4 Direto
      m4DirectBetType,
      // ü§ñ NOVO: Campo para modo standby
      isStandbyMode
    } = requestBody;

    if (!userId) {
      return NextResponse.json({
        success: false,
        error: 'userId √© obrigat√≥rio'
      }, { status: 400 });
    }

    // Logs removidos: informa√ß√µes t√©cnicas desnecess√°rias para o usu√°rio
    // if (action === 'bet-connect') {
    //   addWebSocketLog(userId, `üîç Dados reais capturados (primeira conex√£o):`, 'info');
    //   addWebSocketLog(userId, `üì± User-Agent: ${userFingerprint?.userAgent || clientUserAgent}`, 'info');
    //   addWebSocketLog(userId, `üåç IP: ${clientIP}`, 'info');
    //   addWebSocketLog(userId, `üó£Ô∏è Idioma: ${userFingerprint?.language || clientLanguage}`, 'info');
    //   if (userFingerprint?.platform) addWebSocketLog(userId, `üñ•Ô∏è Plataforma: ${userFingerprint.platform}`, 'info');
    //   if (userFingerprint?.screenResolution) addWebSocketLog(userId, `üì∫ Resolu√ß√£o: ${userFingerprint.screenResolution}`, 'info');
    //   if (userFingerprint?.timezone) addWebSocketLog(userId, `üïê Timezone: ${userFingerprint.timezone}`, 'info');
    // }

    // A√ß√µes dispon√≠veis
    switch (action) {
      case 'bet-connect':
        return await connectToBettingGame(userId, tipValue, clientIP, userFingerprint, {
          userAgent: userFingerprint?.userAgent || clientUserAgent,
          language: clientLanguage,
          accept: clientAccept,
          acceptEncoding: clientAcceptEncoding,
          referer: clientReferer,
          // Dados adicionais do navegador
          platform: userFingerprint?.platform,
          timezone: userFingerprint?.timezone,
          screenResolution: userFingerprint?.screenResolution,
          colorDepth: userFingerprint?.colorDepth,
          pixelRatio: userFingerprint?.pixelRatio,
          hardwareConcurrency: userFingerprint?.hardwareConcurrency,
          connectionType: userFingerprint?.connectionType
        }, authTokens, forceClientSideAuth, customMartingaleSequence, stakeBased, m4DirectBetType, isStandbyMode);
      
      case 'start-operation':
        return await startSimpleOperation(userId);
      
      case 'stop-operation':
        return await stopSimpleOperation(userId);
      
      case 'get-websocket-logs':
      return await getWebSocketLogs(userId);
      
            case 'get-operation-report':
        return await getOperationReport(userId);
      
      case 'reset-operation-report':
        return await resetOperationReport(userId);
      
      case 'get-connection-status':
        return await getConnectionStatus(userId);
      
      
      
      case 'server-diagnostic':
        return await getServerDiagnostic();
      
      case 'get-sessions-history':
        return await getSessionsHistory(userId);
      
      // üî• NOVO: Funcionalidades consolidadas
      case 'debug-auth':
        if (!testType) {
          return NextResponse.json({
            success: false,
            error: 'testType √© obrigat√≥rio para debug-auth'
          }, { status: 400 });
        }
        const debugResult = await debugAuth(testType, userId);
        return NextResponse.json(debugResult);
      
      case 'get-blaze-token':
        const tokenResult = await getUserBlazeToken(userId);
        return NextResponse.json(tokenResult);

      case 'generate-client-tokens':
        if (!blazeToken) {
          return NextResponse.json({
            success: false,
            error: 'blazeToken √© obrigat√≥rio para generate-client-tokens'
          }, { status: 400 });
        }

        try {
          console.log('üîÑ [PROXY] Gerando tokens via proxy server-side com headers do browser...');
          
          // ‚úÖ ETAPA 1: Gerar ppToken via proxy
          console.log('üéØ [PROXY] Chamando Blaze para ppToken...');
          
          const blazeHeaders = {
            'Authorization': `Bearer ${blazeToken}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': acceptLanguage || 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br, zstd',
            'Origin': 'https://blaze.bet.br',
            'Referer': 'https://blaze.bet.br/pt/games/mega-roulette---brazilian',
            'User-Agent': userAgent || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            'DNT': '1',
            'X-Requested-With': 'XMLHttpRequest',
            // Adicionar headers reais do browser
            ...realBrowserHeaders
          };

          // üîÑ USAR SISTEMA DE RETRY para chamada da Blaze
          const blazeResponse = await retryBlazeRequest(async () => {
            return await fetch('https://blaze.bet.br/api/games/mega-roulette---brazilian/play', {
              method: 'POST',
              headers: blazeHeaders,
              body: JSON.stringify({
                selected_currency_type: selectedCurrencyType || 'BRL'
              })
            });
          }, 'ppToken');

          if (!blazeResponse.ok) {
            const errorText = await blazeResponse.text();
            console.error('‚ùå [PROXY] Erro na Blaze ap√≥s tentativas:', blazeResponse.status, errorText);
            return NextResponse.json({
              success: false,
              error: `Erro da Blaze: ${blazeResponse.status} - ${errorText}`
            }, { status: blazeResponse.status });
          }

          const blazeData = await blazeResponse.json();
          console.log('‚úÖ [PROXY] Resposta da Blaze recebida');
          
          // Extrair ppToken
          if (!blazeData.url || !blazeData.url.includes('playGame.do')) {
            console.error('‚ùå [PROXY] URL de jogo n√£o encontrada');
            return NextResponse.json({
              success: false,
              error: 'URL de jogo n√£o encontrada na resposta da Blaze'
            }, { status: 400 });
          }

          const ppTokenMatch = blazeData.url.match(/token%3D([^%]+)/);
          if (!ppTokenMatch) {
            console.error('‚ùå [PROXY] ppToken n√£o encontrado');
            return NextResponse.json({
              success: false,
              error: 'ppToken n√£o encontrado na resposta da Blaze'
            }, { status: 400 });
          }

          const ppToken = ppTokenMatch[1];
          console.log('‚úÖ [PROXY] ppToken extra√≠do com sucesso');

          // ‚úÖ ETAPA 2: Gerar jsessionId via proxy
          console.log('üéÆ [PROXY] Chamando Pragmatic para jsessionId...');
          
          // Aguardar 2 segundos conforme recomenda√ß√£o
          await new Promise(resolve => setTimeout(resolve, 2000));

          const extraData = {
            lobbyUrl: 'https://blaze.bet.br',
            requestCountryCode: 'BR',
            cashierUrl: 'https://blaze.bet.br/?modal=cashier&type=deposit',
            language: 'pt-BR',
            currency: 'BRL',
            technology: 'H5',
            platform: 'WEB',
            timezone: 'America/Sao_Paulo',
            region: 'BR',
            locale: 'pt-BR'
          };

          const pragmaticParams = new URLSearchParams({
            environmentID: '247',
            gameid: '287',
            secureLogin: 'sfws_blazecombrsw',
            requestCountryCode: 'BR',
            userEnvId: '247',
            ppCasinoId: '6376',
            ppGame: '287',
            ppToken: ppToken,
            ppExtraData: btoa(JSON.stringify(extraData)),
            isGameUrlApiCalled: 'true',
            stylename: 'sfws_blazecombrsw'
          });

          const pragmaticUrl = `https://games.pragmaticplaylive.net/api/secure/GameLaunch?${pragmaticParams}`;
          
          const pragmaticHeaders = {
            'User-Agent': userAgent || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Accept-Language': acceptLanguage || 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br, zstd',
            'DNT': '1',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'cross-site',
            'Connection': 'keep-alive',
            'Priority': 'u=0, i',
            // Adicionar headers reais do browser
            ...realBrowserHeaders
          };

          const pragmaticResponse = await fetch(pragmaticUrl, {
            method: 'GET',
            headers: pragmaticHeaders,
            redirect: 'manual'
          });

          console.log('üìä [PROXY] Status da resposta Pragmatic:', pragmaticResponse.status);

          let jsessionId = null;

          // Verificar redirect (302)
          if (pragmaticResponse.status === 302) {
            const location = pragmaticResponse.headers.get('location');
            console.log('üîÑ [PROXY] Redirect detectado');
            if (location && location.includes('JSESSIONID=')) {
              const jsessionMatch = location.match(/JSESSIONID=([^&]+)/);
              if (jsessionMatch) {
                jsessionId = jsessionMatch[1];
                console.log('‚úÖ [PROXY] jsessionId extra√≠do do redirect');
              }
            }
          }

          // Verificar set-cookie header como fallback
          if (!jsessionId) {
            const setCookieHeader = pragmaticResponse.headers.get('set-cookie');
            if (setCookieHeader && setCookieHeader.includes('JSESSIONID=')) {
              const jsessionMatch = setCookieHeader.match(/JSESSIONID=([^;]+)/);
              if (jsessionMatch) {
                jsessionId = jsessionMatch[1];
                console.log('‚úÖ [PROXY] jsessionId extra√≠do do cookie');
              }
            }
          }

          if (!jsessionId) {
            console.error('‚ùå [PROXY] jsessionId n√£o encontrado');
            return NextResponse.json({
              success: false,
              error: 'jsessionId n√£o encontrado na resposta do Pragmatic'
            }, { status: 400 });
          }

          // ‚úÖ Retornar tokens gerados
          const authData = {
            userId: userId,
            originalUserId: userId,
            ppToken: ppToken,
            jsessionId: jsessionId,
            pragmaticUserId: `user_${Date.now()}`,
            timestamp: new Date().toISOString()
          };

          console.log('‚úÖ [PROXY] Tokens gerados com sucesso via proxy');
          return NextResponse.json({
            success: true,
            data: authData,
            message: 'Tokens gerados com sucesso via proxy server-side'
          });

        } catch (error) {
          console.error('‚ùå [PROXY] Erro no proxy de tokens:', error);
          return NextResponse.json({
            success: false,
            error: `Erro no proxy: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
          }, { status: 500 });
        }
      
      // ‚ùå REMOVIDO: blaze-proxy, pragmatic-proxy, frontend-auth agora s√£o client-side apenas
      case 'blaze-proxy':
      case 'pragmatic-proxy':
      case 'frontend-auth':
        return NextResponse.json({
          success: false,
          error: 'Esta fun√ß√£o foi movida para client-side. Use o browser para gerar tokens.'
        }, { status: 400 });
      
      case 'update-strategy':
        // üõ°Ô∏è Simplificado: Apenas suporte para stake selecionado
        const { selectedStake } = requestBody;
        
        if (userId && operationState[userId] && selectedStake) {
          // Encontrar evolu√ß√£o correspondente
          const evolution = STAKE_EVOLUTIONS.find(e => e.m1 === selectedStake) || STAKE_EVOLUTIONS[0];
          // Atualizar stake na opera√ß√£o
          operationState[userId].strategy.sequences = [evolution.m1, evolution.m2];
          addWebSocketLog(userId, `üí∞ Stake atualizada: Evolu√ß√£o ${evolution.id} - R$ ${selectedStake.toFixed(2)}`, 'success');
        }
        
        return NextResponse.json({ success: true });
      
      case 'set-pending-stake':
        const { newStake: pendingStake } = requestBody;
        
        if (userId && pendingStake && operationState[userId]) {
          // Definir stake pendente
          operationState[userId].pendingStake = pendingStake;
          
          addWebSocketLog(userId, `‚è≥ Stake pendente: R$ ${pendingStake.toFixed(2)} - Ser√° aplicada ap√≥s pr√≥xima derrota`, 'info');
        }
        return NextResponse.json({ success: true });
      
      case 'update-stake':
        const { newStake } = requestBody;
        
        if (userId && newStake && operationState[userId]) {
          // ‚úÖ CORRE√á√ÉO: S√≥ aplicar stake diretamente se n√£o h√° opera√ß√£o ativa
          if (!operationState[userId].active) {
            // Atualizar stake na opera√ß√£o
            operationState[userId].strategy.sequences = requestBody.customMartingaleSequence || [newStake, newStake * 4];
            
            addWebSocketLog(userId, `üí∞ Stake atualizada: R$ ${newStake.toFixed(2)}`, 'success');
          } else {
            // Se h√° opera√ß√£o ativa, usar sistema de stake pendente
            operationState[userId].pendingStake = newStake;
            addWebSocketLog(userId, `‚è≥ Stake pendente: R$ ${newStake.toFixed(2)} - Ser√° aplicada ap√≥s pr√≥xima derrota`, 'info');
          }
        }
        return NextResponse.json({ success: true });
      
      case 'update-auto-progression':
        // üöÄ NOVO: Configura√ß√£o de progress√£o autom√°tica de stake
        const { enabled, initialStakeIndex } = requestBody;
        
        // Garantir que websocketLogs existe
        if (!websocketLogs[userId]) {
          websocketLogs[userId] = [];
        }
        
        if (userId) {
          // Criar operationState se n√£o existir
          if (!operationState[userId]) {
            operationState[userId] = {
              active: false,
              martingaleLevel: 0,
              waitingForResult: false,
              strategy: {
                sequences: [1, 2],
                maxMartingale: 2
              },
              stats: {
                totalBets: 0,
                wins: 0,
                losses: 0,
                profit: 0,
                startedAt: Date.now()
              },
              autoProgressionEnabled: false,
              initialStakeIndex: 0,
              currentStakeIndex: 0,
            };
          }
          
          operationState[userId].autoProgressionEnabled = enabled;
          operationState[userId].initialStakeIndex = initialStakeIndex || 0;
          operationState[userId].currentStakeIndex = initialStakeIndex || 0;
          
          addWebSocketLog(userId, `üöÄ Progress√£o autom√°tica ${enabled ? 'ativada' : 'desativada'}`, enabled ? 'success' : 'info');
          
          if (enabled) {
            addWebSocketLog(userId, `üìä √çndice inicial: ${initialStakeIndex + 1} - Evolu√ß√£o: ${STAKE_EVOLUTIONS[initialStakeIndex]?.id || 1}`, 'info');
          }
        }
        return NextResponse.json({ success: true });
      
      case 'update-progression':
        // üöÄ REMOVIDO: Funcionalidade de progress√£o autom√°tica removida
        return NextResponse.json({ success: true });
      
      case 'reset-progression':
        // üöÄ REMOVIDO: Funcionalidade de progress√£o autom√°tica removida
        return NextResponse.json({ success: true });
      
      case 'activate-real-mode':
        // üõ°Ô∏è NOVO: Ativar modo real automaticamente quando status melhorar
        if (userId && operationState[userId]?.active) {
          addWebSocketLog(userId, `üõ°Ô∏è Comando recebido: ativar modo real automaticamente`, 'success');
          
          // üî• NOVO: Verificar se √© modo M4 direto
          if (requestBody.m4DirectBetType) {
            addWebSocketLog(userId, `üî• MODO M4 DIRETO ATIVADO! Ignorando todos os limiares`, 'success');
            
            // For√ßar sa√≠da do modo an√°lise e ativar modo real imediatamente
            const operation = operationState[userId];
            operation.martingaleLevel = 0; // Reset para M1 no modo real
            
            // Marcar como modo M4 direto para parar quando acertar M4
            operation.m4DirectBetType = requestBody.m4DirectBetType || 'red'; // üî• NOVO: Armazenar tipo de aposta
            
            const betTypeLabel = 
              operation.m4DirectBetType === 'red' ? 'VERMELHO' :
              operation.m4DirectBetType === 'black' ? 'PRETO' :
              operation.m4DirectBetType === 'even' ? 'PAR' :
              operation.m4DirectBetType === 'odd' ? '√çMPAR' :
              operation.m4DirectBetType === 'low' ? 'BAIXAS (1-18)' :
              'ALTAS (19-36)';
            
            addWebSocketLog(userId, `üöÄ MODO M4 DIRETO ATIVADO! Apostando em ${betTypeLabel} direto no M1 ‚Üí Objetivo: acertar M4`, 'success');
          } else {
            // L√≥gica normal para status seguro
            const operation = operationState[userId];
            operation.martingaleLevel = 0; // Reset para M1 no modo real
            
            addWebSocketLog(userId, `üöÄ MODO REAL ATIVADO! Status seguro detectado ‚Üí Iniciando apostas reais no M1`, 'success');
          }
        }
        return NextResponse.json({ success: true });
      
      case 'update-bet-type':
        // ü§ñ NOVO: Endpoint para atualizar tipo de aposta dinamicamente durante opera√ß√£o
        if (userId && operationState[userId]) {
          const newBetType = requestBody.m4DirectBetType;
          
          if (!newBetType) {
            return NextResponse.json({
              success: false,
              error: 'Tipo de aposta (m4DirectBetType) √© obrigat√≥rio'
            }, { status: 400 });
          }
          
          const validBetTypes = ['await', 'red', 'black', 'even', 'odd', 'low', 'high'];
          if (!validBetTypes.includes(newBetType)) {
            return NextResponse.json({
              success: false,
              error: 'Tipo de aposta inv√°lido'
            }, { status: 400 });
          }
          
          // Atualizar tipo de aposta no estado da opera√ß√£o
          operationState[userId].m4DirectBetType = newBetType;
          
          // üîÑ NOVO: Resetar controle de log do modo aguardar quando tipo muda
          awaitModeLogShown[userId] = false;
          
          const betTypeNames = {
            'await': 'AGUARDAR',
            'red': 'VERMELHO',
            'black': 'PRETO',
            'even': 'PAR',
            'odd': '√çMPAR',
            'low': 'BAIXAS (1-18)',
            'high': 'ALTAS (19-36)'
          };
          
          const typeName = betTypeNames[newBetType as keyof typeof betTypeNames];
          // Log removido para evitar repeti√ß√£o excessiva
          // addWebSocketLog(userId, `ü§ñ Auto Bot: Tipo de aposta atualizado para ${typeName}`, 'success');
          
          return NextResponse.json({
            success: true,
            message: `Tipo de aposta atualizado para ${typeName}`,
            newBetType: newBetType
          });
        }
        
        return NextResponse.json({
          success: false,
          error: 'Opera√ß√£o n√£o encontrada'
        }, { status: 404 });
      
      // Removed: set-standby-mode case
      
      // üéØ SISTEMA AUTOM√ÅTICO: Debug manual removido - processamento autom√°tico via gameId
      
      // üéØ SISTEMA AUTOM√ÅTICO: Debug manual removido - processamento autom√°tico via gameId
      
      case 'force-check-api-results':
        // üîÑ NOVO: A√ß√£o para for√ßar WebSocket verificar API de resultados
        try {
          const operation = operationState[userId];
          if (!operation) {
            return NextResponse.json({
              success: false,
              error: 'Opera√ß√£o n√£o encontrada'
            });
          }
          
          const { gameId, expectedResult } = requestBody;
          
      
          
          if (expectedResult) {
            addWebSocketLog(userId, `üéØ Resultado esperado: ${expectedResult.number} (${expectedResult.color})`, 'info');
          }
          
          // For√ßar verifica√ß√£o da API
          await checkForNewResults(userId);
          
          // Aguardar um pouco para o processamento
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // Verificar se resultado espec√≠fico foi processado
          if (gameId && operation.lastProcessedGameId === gameId) {
            addWebSocketLog(userId, `‚úÖ Resultado ${gameId} foi processado com sucesso pelo sistema`, 'success');
            
            return NextResponse.json({
              success: true,
              data: {
                message: 'Resultado processado com sucesso pelo WebSocket',
                gameId,
                processedGameId: operation.lastProcessedGameId,
                operationState: {
                  waitingForResult: operation.waitingForResult,
                  lastGameId: operation.lastGameId,
                  currentBetColor: operation.currentBetColor
                }
              }
            });
          } else {
            addWebSocketLog(userId, `‚ö†Ô∏è Resultado ${gameId} ainda n√£o foi processado pelo sistema`, 'info');
            addWebSocketLog(userId, `üîç √öltimo processado: ${operation.lastProcessedGameId || 'nenhum'}`, 'info');
            
            return NextResponse.json({
              success: true,
              data: {
                message: 'Verifica√ß√£o executada - resultado ainda n√£o processado pelo WebSocket',
                gameId,
                processedGameId: operation.lastProcessedGameId,
                operationState: {
                  waitingForResult: operation.waitingForResult,
                  lastGameId: operation.lastGameId,
                  currentBetColor: operation.currentBetColor
                }
              }
            });
          }
          
        } catch (error) {
          return NextResponse.json({
            success: false,
            error: 'Erro ao for√ßar verifica√ß√£o da API'
          });
        }
      
      default:
      return NextResponse.json({
        success: false,
          error: `A√ß√£o "${action}" n√£o implementada`
    }, { status: 400 });
    }

  } catch (error) {
    return NextResponse.json({
      success: false,
      error: 'Erro interno do servidor'
    }, { status: 500 });
  }
}

// Fun√ß√µes de token removidas (usamos Edge Function)



// Removed: Stop gain functions

// Fun√ß√£o para adicionar log
// üîÑ SISTEMA DE RETRY INTELIGENTE para erros 500 da Blaze
async function retryBlazeRequest(
  requestFunction: () => Promise<Response>, 
  operationType: string,
  maxRetries: number = 3,
  baseDelayMs: number = 2000
): Promise<Response> {
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      // Log removido: verbose demais no terminal
      
      const response = await requestFunction();
      
      // Se resposta OK, retornar imediatamente
      if (response.ok) {
        if (attempt > 1) {
          // Log removido: verbose demais no terminal
        }
        return response;
      }
      
      // Se erro 500 (Internal Server Error) da Blaze, tentar novamente
      if (response.status === 500 && attempt < maxRetries) {
        const errorText = await response.text();
        
        // Verificar se √© o erro espec√≠fico c√≥digo 1010
        const isCode1010 = errorText.includes('"code":1010') || errorText.includes('Code: 1010');
        
        if (isCode1010) {
          const delayMs = baseDelayMs * Math.pow(2, attempt - 1); // Backoff exponencial
          console.log(`‚ö†Ô∏è [RETRY-${operationType.toUpperCase()}] Erro 500 (Code: 1010) da Blaze - tentando novamente em ${delayMs}ms...`);
          console.log(`üîç [RETRY-${operationType.toUpperCase()}] Erro detectado: Internal server error tempor√°rio`);
          
          // Aguardar antes da pr√≥xima tentativa
          await new Promise(resolve => setTimeout(resolve, delayMs));
          continue;
        }
      }
      
      // Se chegou aqui, erro n√£o √© 500 ou n√£o √© recuper√°vel
      console.log(`‚ùå [RETRY-${operationType.toUpperCase()}] Erro ${response.status} n√£o √© recuper√°vel`);
      return response;
      
    } catch (error) {
              // Log removido: verbose demais no terminal
      
      // Se n√£o √© a √∫ltima tentativa, aguardar antes de tentar novamente
      if (attempt < maxRetries) {
        const delayMs = baseDelayMs * Math.pow(2, attempt - 1);
        console.log(`üîÑ [RETRY-${operationType.toUpperCase()}] Tentando novamente em ${delayMs}ms...`);
        await new Promise(resolve => setTimeout(resolve, delayMs));
        continue;
      }
      
      // Se √© a √∫ltima tentativa, re-lan√ßar o erro
      throw error;
    }
  }
  
  // Este ponto nunca deveria ser alcan√ßado, mas por seguran√ßa:
  throw new Error(`M√°ximo de tentativas (${maxRetries}) esgotado para ${operationType}`);
}

function addWebSocketLog(userId: string, message: string, type: 'info' | 'error' | 'success' | 'game' | 'bets-open' | 'bets-closed' = 'info') {
  if (!websocketLogs[userId]) {
    websocketLogs[userId] = [];
  }
  
  websocketLogs[userId].unshift({
    timestamp: Date.now(),
    message,
    type
  });
  
  // Manter apenas os √∫ltimos 50 logs
  if (websocketLogs[userId].length > 50) {
    websocketLogs[userId] = websocketLogs[userId].slice(0, 50);
  }
  

  
}





// üîÑ FUN√á√ÉO: Polling da URL/API para detectar novos resultados
async function startApiPolling(userId: string): Promise<void> {
  const operation = operationState[userId];
  if (!operation) return;
  
  // Limpar polling anterior se existir
  if (operation.apiPollingInterval) {
    clearInterval(operation.apiPollingInterval);
  }
  
  // üîá LOG SILENCIOSO: N√£o logar o in√≠cio do polling - apenas quando h√° apostas
  // addWebSocketLog(userId, `üîÑ Iniciando polling da URL/API para detectar resultados`, 'info');
  
  // Polling a cada 2 segundos
  operation.apiPollingInterval = setInterval(async () => {
    try {
      await checkForNewResults(userId);
    } catch (error) {
      console.warn(`Erro no polling da URL/API para usu√°rio ${userId}:`, error);
    }
  }, 2000);
}

// üîç FUN√á√ÉO: Verificar se h√° novos resultados na URL/API
async function checkForNewResults(userId: string): Promise<void> {
  const operation = operationState[userId];
  if (!operation) {
    return;
  }
  
  // üéØ NOVA L√ìGICA: Usar fun√ß√£o centralizada para determinar se deve fazer polling
  if (!shouldPollForResults(userId)) {
    // üîá SILENCIOSO: N√£o fazer polling se n√£o h√° necessidade
    return;
  }
  
  // üìä LOG: Verifica√ß√£o silenciosa - removido log excessivo
  const hasActiveBets = operation.waitingForResult && !!operation.lastGameId;
  

  
  try {

    
    // üéØ SOLU√á√ÉO: Usar getBaseUrl() para funcionar tanto no localhost quanto em produ√ß√£o
    const response = await fetch(`${getBaseUrl()}/api/bmgbr2/blaze/pragmatic/blaze-megarouletebr/insights`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        user_id: `polling_${userId}`,
        action: 'get',
        limit: 3 // Buscar apenas os √∫ltimos 3 resultados
      })
    });
    

    
    if (response.ok) {
      const result = await response.json();
      

      
      if (result.success && result.data && result.data.results && result.data.results.length > 0) {
        const latestResult = result.data.results[0]; // Resultado mais recente
        

        
        // üîç VERIFICAR: Se √© um novo resultado que n√£o foi processado
        if (latestResult.gameId !== operation.lastProcessedGameId) {
          // üéØ VERIFICAR: Se estamos aguardando resultado de uma aposta ESPEC√çFICA
          if (operation.waitingForResult && operation.lastGameId) {

            
            // ‚úÖ CORRE√á√ÉO: Verificar se o resultado √© para a aposta que est√° aguardando
            if (latestResult.gameId === operation.lastGameId) {
              // üéØ Resultado da aposta encontrado
              addWebSocketLog(userId, `‚úÖ Resultado encontrado: Game ${latestResult.gameId}, N√∫mero ${latestResult.number}`, 'success');
              
              // Processar resultado da aposta espec√≠fica
              const correctedColor = getColorFromNumber(latestResult.number);
              const colorCode = latestResult.number === 0 ? 'green' : (correctedColor === 'red' ? 'R' : 'B');
              
              await processGameResult(userId, latestResult.gameId, latestResult.number, correctedColor);
              
              // ‚úÖ Resultado processado - sistema deve continuar funcionando
              addWebSocketLog(userId, `‚úÖ Resultado processado com sucesso!`, 'success');
            } else {

            }
                      }
          
          // Atualizar √∫ltimo resultado processado
          operation.lastProcessedGameId = latestResult.gameId;
          
          // üéØ NOVO: Atualizar hist√≥rico apenas quando h√° apostas pendentes
          const hasActiveBets = operation.waitingForResult && !!operation.lastGameId;
          
          if (hasActiveBets) {
            // Atualizar hist√≥rico de resultados para o frontend
            if (!gameResults[userId]) {
              gameResults[userId] = [];
            }
            
            gameResults[userId].unshift({
              number: latestResult.number,
              color: latestResult.number === 0 ? 'green' : (getColorFromNumber(latestResult.number) === 'red' ? 'R' : 'B'),
              gameId: latestResult.gameId,
              timestamp: new Date(latestResult.timestamp || latestResult.created_at).getTime()
            });
            
            // Manter apenas os √∫ltimos 50 resultados
            if (gameResults[userId].length > 50) {
              gameResults[userId] = gameResults[userId].slice(0, 50);
            }
          }
        }
      } else {

      }
    } else {

    }
  } catch (error) {
    console.warn(`Erro ao verificar novos resultados para usu√°rio ${userId}:`, error);
    addWebSocketLog(userId, `‚ùå Erro ao verificar novos resultados: ${error instanceof Error ? error.message : 'Erro desconhecido'}`, 'error');
  }
}

// üîÑ FUN√á√ÉO: Parar polling da URL/API
async function stopApiPolling(userId: string): Promise<void> {
  const operation = operationState[userId];
  if (!operation || !operation.apiPollingInterval) {
    return;
  }
  
  clearInterval(operation.apiPollingInterval);
  operation.apiPollingInterval = undefined;
  
  // üîá LOG SILENCIOSO: N√£o logar quando para o polling
  // addWebSocketLog(userId, `üîÑ Polling da URL/API parado`, 'info');
}

// üéØ FUN√á√ÉO: Determinar se deve fazer polling baseado no estado da opera√ß√£o
function shouldPollForResults(userId: string): boolean {
  const operation = operationState[userId];
  if (!operation) return false;
  
  // Condi√ß√µes ESPEC√çFICAS para fazer polling:
  // 1. H√° apostas pendentes aguardando resultado
  
  const hasActiveBets = operation.waitingForResult && !!operation.lastGameId;
  

  
  // üéØ NOVO: S√≥ fazer polling quando h√° apostas pendentes
  // N√£o fazer polling apenas por estar "operando" sem apostas
  return hasActiveBets;
}

// üîç FUN√á√ÉO: Processar resultado do jogo com dupla valida√ß√£o
async function processGameResult(userId: string, gameId: string, number: number, color: string) {

  
  // üîç DUPLA VALIDA√á√ÉO: Verificar e corrigir inconsist√™ncias
  const validation = validateAndCorrectColor(number, color);
  
  // üìã LOG: Mostrar resultado da valida√ß√£o apenas se houver mensagem
  if (validation.logMessage) {
    addWebSocketLog(userId, validation.logMessage, validation.hasConflict ? 'error' : 'success');
  }
  
  // üîß USAR SEMPRE A COR CORRIGIDA
  const correctedColor = validation.correctedColor;
  const colorCode = number === 0 ? 'green' : (correctedColor === 'red' ? 'R' : 'B');
  
  // üö´ REMOVIDO: Valida√ß√£o dupla via WebSocket
  // Agora os resultados s√£o processados APENAS via URL/API polling
  
  // üíæ RECOVERY: Verificar se este resultado resolve uma aposta pendente
  const operation = operationState[userId];
  if (operation?.waitingForResult && operation.lastGameId === gameId) {
    // üîÑ RECOVERY: Resultado encontrado para aposta pendente (Game: ${gameId}) - Log removido
    
    // üéØ NOVO: Log detalhado da aposta vs resultado
    const betColorName = operation.currentBetColor === 'R' ? 'VERMELHO' : 
                         operation.currentBetColor === 'B' ? 'PRETO' : 
                         operation.currentBetColor === 'E' ? 'PAR' : 
                         operation.currentBetColor === 'O' ? '√çMPAR' : 
                         operation.currentBetColor === 'L' ? 'BAIXAS (1-18)' : 
                         operation.currentBetColor === 'H' ? 'ALTAS (19-36)' : 'DESCONHECIDO';
    
    // üéØ Aposta: ${betColorName} | Resultado: ${correctedColor.toUpperCase()} (${number}) - Log removido
    
    // üìã VERIFICAR: Se h√° entrada pendente ou enviada no hist√≥rico para atualizar
    if (detailedHistory[userId]) {
      const pendingEntry = detailedHistory[userId].slice().reverse().find(entry => 
        entry.gameId === gameId && (entry.resultColor === 'pending' || entry.resultColor === 'sent')
      );
      
      if (pendingEntry) {
        const betColor = operation.currentBetColor;
        const isWin = (colorCode === betColor);
        
        // Removido: update pending bet simplificado
        
        addWebSocketLog(userId, `üìã Entrada pendente/enviada atualizada no hist√≥rico`, 'success');
      }
    }
    
    // üîÑ PROSSEGUIR: Processar o resultado da aposta
    // üîÑ Processando resultado da aposta... - Log removido
  } else {
    // üîç LOG: Resultado processado silenciosamente para hist√≥rico
    // Removido logs excessivos para reduzir verbosidade
  }
  
  // üìã NOVO: Atualizar n√∫mero do resultado no hist√≥rico detalhado
  updateLastHistoryEntryNumber(userId, number, gameId);
  
  // ‚úÖ SEMPRE armazenar resultado ANTES de qualquer processamento (incluindo zeros)
  if (!gameResults[userId]) {
    gameResults[userId] = [];
  }
  
  gameResults[userId].push({
    number,
    color: colorCode,
    gameId,
    timestamp: Date.now()
  });
  
  // Mant√©m apenas os √∫ltimos 50 resultados
  if (gameResults[userId].length > 50) {
    gameResults[userId].shift();
  }
  
  // Se for zero e h√° opera√ß√£o ativa, processa como derrota
  if (number === 0 && operationState[userId]?.active) {
    addWebSocketLog(userId, `üü¢ Zero detectado: ${number} - processando como derrota`, 'game');
    await processOperationResult(userId, 'green', number);
    return;
  }
  
  // Se opera√ß√£o ativa, processa aposta
  if (operationState[userId]?.active) {
    await processOperationResult(userId, colorCode, number);
  }
}

// üîç FUN√á√ÉO: Verificar se aposta ganhou baseada no tipo de aposta
function checkBetWin(betColor: 'R' | 'B' | 'E' | 'O' | 'L' | 'H' | 'AWAIT', resultColor: string, resultNumber: number): boolean {
  // Zero sempre perde (exceto se apostou diretamente no zero)
  if (resultNumber === 0) {
    return false;
  }
  
  switch (betColor) {
    case 'AWAIT': // Aguardar - n√£o h√° aposta
      return false;
    case 'R': // Vermelho
      return resultColor === 'R';
    case 'B': // Preto
      return resultColor === 'B';
    case 'E': // Par
      return resultNumber % 2 === 0;
    case 'O': // √çmpar
      return resultNumber % 2 === 1;
    case 'L': // Baixas (1-18)
      return resultNumber >= 1 && resultNumber <= 18;
    case 'H': // Altas (19-36)
      return resultNumber >= 19 && resultNumber <= 36;
    default:
      return false;
  }
}

// NOVO: Fun√ß√£o para processar resultado da opera√ß√£o (Nova L√≥gica de Aquecimento)
async function processOperationResult(userId: string, resultColor: string, resultNumber: number = 0) {

  
  const operation = operationState[userId];
  if (!operation || !operation.active || !operation.strategy?.sequences) {
    addWebSocketLog(userId, '‚ùå Estado da opera√ß√£o inv√°lido para processar resultado', 'error');
    return;
  }

  // üé≤ CORRE√á√ÉO: Usar cor da aposta armazenada
  const betColor = operation.currentBetColor;
  
  if (!betColor) {
    addWebSocketLog(userId, '‚ùå Cor da aposta n√£o encontrada - n√£o √© poss√≠vel processar resultado', 'error');
    return;
  }
  
  // üîç LOG: Informar que o resultado est√° sendo processado
  addWebSocketLog(userId, `üîç Processando resultado: ${resultColor} (${resultNumber}) vs Aposta: ${betColor}`, 'info');
  
  // ‚úÖ NOVA L√ìGICA: Verificar vit√≥ria baseada no tipo de aposta
  const isWin = checkBetWin(betColor, resultColor, resultNumber);
  
  // ‚úÖ CORRE√á√ÉO: Determinar modo baseado nos contadores, n√£o na propriedade mode
  const isRealMode = canExitAnalysisMode(userId);
  
  // ‚úÖ CORRE√á√ÉO: S√≥ conta estat√≠sticas no modo REAL, n√£o na an√°lise (simula√ß√£o)
  if (isRealMode) {
    operation.stats.totalBets++;
  }
  
  // ‚úÖ CR√çTICO: Liberar estado "aguardando resultado" IMEDIATAMENTE
  const wasWaitingForResult = operation.waitingForResult;
  operation.waitingForResult = false;
  
  // üîÑ NOVO: Parar polling quando resultado √© processado
  if (wasWaitingForResult) {
    await stopApiPolling(userId);
  }
  
  // üîç LOG: Confirmar que o estado foi liberado
  if (wasWaitingForResult) {
    // ‚úÖ Estado "aguardando resultado" liberado para pr√≥xima aposta - Log removido
  }
  
  // ‚úÖ NOVO: Usar o valor real da aposta armazenado, n√£o o valor da sequ√™ncia atual
  const betAmount = operation.lastBetAmount || operation.strategy?.sequences?.[operation.martingaleLevel];
  const betColorName = COLOR_NAMES[betColor] || betColor;
  const resultColorName = COLOR_NAMES[resultColor] || resultColor;
  
  // üéØ NOVO: Log detalhado para apostas par/√≠mpar
  let betDescription = betColorName;
  if (betColor === 'E' || betColor === 'O') {
    betDescription += ` (${resultNumber})`;
  }
  
  // üìã CORRE√á√ÉO: Registrar no hist√≥rico detalhado baseado nos contadores
  addDetailedHistoryEntry(userId, {
    martingaleLevel: operation.martingaleLevel,
    betColor: betColor,
    resultColor: resultColor,
    resultNumber: resultNumber,
    gameId: operation.lastGameId || 'unknown',
    isWin: isWin,
    betAmount: betAmount
  });
  
  // ‚úÖ CORRE√á√ÉO: Limpar cor da aposta ap√≥s processamento
  operation.currentBetColor = undefined;
  
  if (isWin) {
    // ‚úÖ GANHOU - NOVA L√ìGICA: Avan√ßa para pr√≥ximo n√≠vel
    // üí∞ S√≥ conta estat√≠sticas no modo REAL
    if (isRealMode) {
      operation.stats.wins++;
      operation.stats.profit += betAmount;
      

    }
    
    const modeLabel = isRealMode ? 'üí∞ REAL' : 'üîç AN√ÅLISE';
    // Lucro individual da aposta (sempre o valor da aposta)
    addWebSocketLog(userId, `‚úÖ Vit√≥ria! Lucro de R$ ${betAmount.toFixed(2)}`, 'success');
    
    // üîç MODO AN√ÅLISE: N√ÉO marca vit√≥rias aqui - s√≥ marca quando perde
    
    // üéØ NOVA L√ìGICA: Registra vit√≥ria IMEDIATAMENTE quando ganha (modo an√°lise)
    const originalRealMode = isRealMode;
    if (!originalRealMode) {
      // Registra vit√≥ria do n√≠vel atual ANTES de avan√ßar
      // Registrar vit√≥ria no martingale (simplificado)
      addWebSocketLog(userId, `üìä Vit√≥ria M${operation.martingaleLevel + 1} registrada`, 'success');
      addWebSocketLog(userId, `‚úÖ üîç AN√ÅLISE - Vit√≥ria M${operation.martingaleLevel + 1} registrada!`, 'success');
      
      // üéØ NOVA VERIFICA√á√ÉO: Ap√≥s registrar vit√≥ria, verificar se limiares foram atingidos
      await checkReadyForRealMode(userId);
      
      // üîç CORRE√á√ÉO: Se o modo mudou para real, N√ÉO incrementar martingaleLevel (j√° foi resetado para M1)
      const newRealMode = canExitAnalysisMode(userId);
      if (newRealMode !== originalRealMode) {
        addWebSocketLog(userId, `üîç MODO REAL ATIVADO - Mantendo M1 (n√£o incrementando)`, 'info');
        return; // Sair sem incrementar
      }
    }
    
    // ‚úÖ L√ìGICA MARTINGALE NORMAL: Vit√≥ria avan√ßa n√≠vel (apenas se ainda estiver no mesmo modo)
    operation.martingaleLevel++; // Avan√ßa martingale
    
    // üéØ L√ìGICA REMOVIDA: Renova√ß√£o agora acontece ap√≥s apostas, n√£o ap√≥s resultados
    
    // ‚úÖ Verificar se atingiu M2 (m√°ximo da sequ√™ncia)
    if (operation.martingaleLevel >= 2) {
              // üî• NOVO: Verificar se est√° em modo M2 direto
        if (operation.m4DirectBetType) {
          // addWebSocketLog(userId, `üî• MODO M2 DIRETO - OBJETIVO CONCLU√çDO! Acertou M2!`, 'success');
          addWebSocketLog(userId, `üéØ MISS√ÉO CUMPRIDA! Parando opera√ß√£o automaticamente.`, 'success');
          
          // üéØ NOVO: Marcar miss√£o como cumprida para impedir apostas futuras
          operation.missionCompleted = true;
          addWebSocketLog(userId, `üõ°Ô∏è Prote√ß√£o ativada: Sistema n√£o apostar√° mais at√© reset manual`, 'info');
          
          // Parar opera√ß√£o completamente
          resetOperationSafely(userId, 'MODO M2 DIRETO - Objetivo conclu√≠do', true);
          
          // Mostrar mensagem de sucesso espec√≠fica do modo M2 direto
          // addWebSocketLog(userId, `‚úÖ üî• MODO M2 DIRETO CONCLU√çDO COM SUCESSO! üî•`, 'success');
          
          return; // Parar opera√ß√£o
        }
      
      // üîÑ CORRE√á√ÉO: Usar contadores para determinar comportamento
      const currentRealMode = canExitAnalysisMode(userId);
      
      if (!currentRealMode) {
                  // üîÑ AN√ÅLISE: M2 atingido = ganhou no M2 ‚Üí RESETAR AN√ÅLISE COMPLETA
          addWebSocketLog(userId, `‚úÖ üîç AN√ÅLISE - M2 GANHO! Resetando an√°lise completa`, 'success');
        
        addWebSocketLog(userId, `üéØ L√ìGICA: M2 j√° saiu, chances menores de sair outro ‚Üí Recome√ßando an√°lise`, 'info');
        
        // üîÑ RESET COMPLETO: Limpar todos os contadores
        resetAnalysisCounters(userId);
        // Removido: fun√ß√µes que n√£o existem mais
        
        // Reset para in√≠cio da sequ√™ncia (volta para M1)
        operation.martingaleLevel = 0;
        operation.waitingForResult = false;
        operation.currentBetColor = undefined;
        
        // üéØ NOVO: Verificar se est√° pronto para ativar modo real ap√≥s reset para M1
        // Removido: smartActivation n√£o existe mais
        
        addWebSocketLog(userId, `üîÑ An√°lise resetada - Recome√ßando do M1 com contadores zerados`, 'info');
        
        return; // N√£o continua o fluxo normal
      } else {
        // Estrat√©gia break-even removida
        
        // üí∞ REAL: M2 atingido = sucesso ‚Üí Volta para an√°lise  
        addWebSocketLog(userId, `üõë REAL - M2 GANHO! Opera√ß√£o conclu√≠da com SUCESSO!`, 'success');
        
        addWebSocketLog(userId, `üí∞ Sequ√™ncia M1-M2 completada - Resetando dados (preservando autentica√ß√£o)`, 'success');
        
        // üîß NOTA: No modo REAL n√£o precisamos registrar vit√≥rias para limiares (s√≥ conta lucro)
        
        // üîß CORRE√á√ÉO: Usar reset seguro que preserva autentica√ß√£o
        resetOperationSafely(userId, 'REAL - M2 conclu√≠do com sucesso', true); // true = resetar coleta de resultados
        
        // ‚úÖ NOVO: Iniciar nova an√°lise automaticamente ap√≥s M2 ganho
        addWebSocketLog(userId, `üîÑ Iniciando nova an√°lise automaticamente...`, 'info');
        setTimeout(() => {
          startSimpleOperation(userId);
        }, 1000); // Aguarda 1 segundo para processar o reset
      }
    } else {
      // ‚úÖ Continua opera√ß√£o - mostrar pr√≥xima aposta
      const currentRealMode = canExitAnalysisMode(userId);
      const modeLabel = currentRealMode ? 'üí∞ REAL' : 'üîç AN√ÅLISE';
      // addWebSocketLog(userId, `üîÑ ${modeLabel} - Pr√≥xima aposta: M${operation.martingaleLevel + 1}`, 'info');
      
      // ‚úÖ Se ainda estiver no modo an√°lise, continuar normalmente
      if (!currentRealMode) {
        addWebSocketLog(userId, `üîÑ ${modeLabel} - Continuando an√°lise no M${operation.martingaleLevel + 1}`, 'info');
      }
    }
    
  } else {
    // ‚ùå PERDEU - NOVA L√ìGICA: Volta para M1
    // üí∞ S√≥ conta estat√≠sticas no modo REAL
    if (isRealMode) {
      operation.stats.losses++;
      operation.stats.profit -= betAmount;
    }
    
    const isGreenDefeat = resultColor === 'green';
    const defeatReason = isGreenDefeat ? '(ZERO)' : `(${resultNumber})`;
    
    const modeLabel = isRealMode ? 'üí∞ REAL' : 'üîç AN√ÅLISE';
    const resultCharacteristics = getNumberCharacteristics(resultNumber);
    addWebSocketLog(userId, `‚ùå Derrota! Preju√≠zo de -R$ ${betAmount.toFixed(2)}`, 'error');
    addWebSocketLog(userId, `üé≤ Resultado: ${resultCharacteristics}`, 'info');
    
    // üîÑ DERROTA NO MODO AN√ÅLISE: Verificar se foi derrota no M2
    if (!isRealMode) {
      // üîÑ NOVA L√ìGICA: Se perdeu no M2, registrar derrota M2
      if (operation.martingaleLevel === 1) { // M2 √© √≠ndice 1
        // Removido: recordM2Loss n√£o existe mais
        addWebSocketLog(userId, `üí• Derrota M2 registrada`, 'error');
        
        // Verificar se atingiu o limiar de derrotas M2
        // Removido: checkReadyForRealMode n√£o existe mais
      }
    }
      
    // ‚úÖ NOVA L√ìGICA: Qualquer derrota volta para M1
    // addWebSocketLog(userId, `üîÑ DERROTA: Voltando para M1`, 'info');
    
    // Reset para in√≠cio da sequ√™ncia
    operation.martingaleLevel = 0;
    
    // üéØ NOVO: Aplicar stake pendente ap√≥s derrota
    if (operation.pendingStake && operation.pendingStake > 0) {
      const findEvolutionByStake = (stake: number) => {
        return STAKE_EVOLUTIONS.find(e => e.m1 === stake) || STAKE_EVOLUTIONS[0];
      };
      
      const evolution = findEvolutionByStake(operation.pendingStake);
      const newSequence = [evolution.m1, evolution.m2];
      operation.strategy.sequences = newSequence;
      
      addWebSocketLog(userId, `üí∞ Stake pendente aplicada ap√≥s derrota: R$ ${operation.pendingStake.toFixed(2)}`, 'success');
      addWebSocketLog(userId, `üìä Nova sequ√™ncia: [${newSequence.map(v => v.toFixed(2)).join(', ')}]`, 'info');
      
      // Limpar stake pendente
      operation.pendingStake = null;
    }
    
    // üöÄ NOVO: Aplicar progress√£o autom√°tica ap√≥s derrota (se ativada)
    if (operation.autoProgressionEnabled && operation.currentStakeIndex !== undefined) {
      const nextIndex = Math.min(STAKE_EVOLUTIONS.length - 1, operation.currentStakeIndex + 1);
      
      // S√≥ avan√ßa se n√£o chegou no limite
      if (nextIndex > operation.currentStakeIndex) {
        operation.currentStakeIndex = nextIndex;
        
        const nextEvolution = STAKE_EVOLUTIONS[nextIndex];
        const newSequence = [nextEvolution.m1, nextEvolution.m2];
        operation.strategy.sequences = newSequence;
        
        addWebSocketLog(userId, `üöÄ Progress√£o autom√°tica: Avan√ßando para evolu√ß√£o ${nextEvolution.id}`, 'success');
        addWebSocketLog(userId, `üìä Nova sequ√™ncia: [${newSequence.map(v => v.toFixed(2)).join(', ')}]`, 'info');
      } else {
        addWebSocketLog(userId, `üöÄ Progress√£o autom√°tica: J√° no limite m√°ximo (evolu√ß√£o ${STAKE_EVOLUTIONS[operation.currentStakeIndex].id})`, 'info');
      }
    }
    
    // üöÄ REMOVIDO: Aplicar progress√£o pendente ap√≥s derrota - funcionalidade removida
    
    // üéØ NOVO: Verificar se est√° pronto para ativar modo real ap√≥s reset para M1
    // Removido: smartActivation n√£o existe mais
    
    // üí∞ REAL: Derrota ‚Üí CONTINUA no modo real (n√£o volta para an√°lise)
    if (isRealMode) {
      // addWebSocketLog(userId, `üîÑ REAL - Derrota ‚Üí Continuando no modo real (objetivo: M4)`, 'info');
      // N√ÉO muda para an√°lise - continua no modo real at√© conseguir M4
    }
    
    // üéØ L√ìGICA REMOVIDA: Renova√ß√£o agora acontece ap√≥s apostas, n√£o ap√≥s resultados
    
    // ‚è∞ REMOVIDO: Renova√ß√£o autom√°tica ap√≥s derrota (j√° feita ap√≥s apostas)
  }
}

// üé≤ FUN√á√ÉO: Sempre apostar no vermelho (sem randomiza√ß√£o)
function generateRedBet(): 'R' {
  return 'R'; // Sempre vermelho
}
  
// üîç NOVA FUN√á√ÉO: Verificar se pode sair do modo an√°lise
function canExitAnalysisMode(userId: string): boolean {
  const operation = operationState[userId];
  if (!operation) return false;
  
  // üî• NOVO: Sistema simplificado - sempre em modo real
  return true;
}

// üéØ NOVA FUN√á√ÉO: Ativar modo real imediatamente quando limiar for atingido
async function checkReadyForRealMode(userId: string): Promise<void> {
  const operation = operationState[userId];
  
  if (!operation) {
    return;
  }
  
  // Sistema simplificado - sempre em modo real
  return;
}

// üéØ NOVA FUN√á√ÉO: Ativar modo real imediatamente
function activateRealModeNow(userId: string): void {
  const operation = operationState[userId];
  
  if (!operation) {
    return;
  }
  
  addWebSocketLog(userId, `üöÄ MODO REAL ATIVADO! Sistema simplificado sempre em modo real`, 'success');
  
  // Sistema simplificado - sempre em modo real
  // Removido: smartActivation n√£o existe mais
  
  // üéØ NOVO: Resetar para M1 quando ativado
  operation.martingaleLevel = 0;
  addWebSocketLog(userId, `üîÑ Resetando para M1 no modo real`, 'info');
}

// üîÑ NOVA FUN√á√ÉO: Reset contadores de an√°lise
function resetAnalysisCounters(userId: string): void {
  // Sistema simplificado - fun√ß√£o vazia
  // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üîÑ Contadores resetados (sistema simplificado)`, 'info');
}

// üíæ FUN√á√ÉO: Renovar sess√£o automaticamente COM BACKUP DE ESTADO E CONTROLE DE RATE LIMITING
async function renewSession(userId: string): Promise<boolean> {
  try {
    const session = sessionControl[userId];
    if (!session) {
      addWebSocketLog(userId, '‚ùå Sess√£o n√£o encontrada para renova√ß√£o', 'error');
      return false;
    }

    if (session.renewalAttempts >= session.maxRenewalAttempts) {
      addWebSocketLog(userId, '‚ùå M√°ximo de tentativas de renova√ß√£o atingido', 'error');
      // üîß NOVO: For√ßar desconex√£o total quando atingir limite
      addWebSocketLog(userId, 'üîÑ For√ßando desconex√£o total - requer rein√≠cio manual', 'error');
      stopAllConnections(userId, true, false);
      return false;
    }

    // üîß REMOVIDO: Verifica√ß√£o de rate limiting - agora usa sistema programado
    // if (!canAttemptRenewal(userId)) {
    //   addWebSocketLog(userId, 'üö´ Renova√ß√£o bloqueada pelo sistema de rate limiting', 'error');
    //   return false;
    // }

    // üíæ CRIAR BACKUP antes de renovar (se opera√ß√£o ativa)
    if (operationState[userId]?.active) {
      // Removido: backup simplificado
    }

    // üîß MODIFICADO: Log para sistema programado removido
    // addWebSocketLog(userId, `üîÑ Renovando sess√£o programada (tentativa ${session.renewalAttempts + 1}/${session.maxRenewalAttempts})`, 'info');
    // addWebSocketLog(userId, `‚è∞ √öltima renova√ß√£o: ${new Date(session.lastRenewal).toLocaleTimeString()}`, 'info');
    
    session.renewalAttempts++;

    // ‚úÖ USAR EDGE FUNCTION: Renovar sess√£o usando Supabase Edge Function
    try {
      const tokenResult = await getUserBlazeToken(userId);
      
      if (!tokenResult.success || !tokenResult.token) {
        addWebSocketLog(userId, `‚ùå Token da Blaze n√£o encontrado: ${tokenResult.error}`, 'error');
        return false;
      }

      const realBrowserHeaders = {
        'sec-ch-ua': '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"macOS"',
        'DNT': '1',
        'Upgrade-Insecure-Requests': '1',
        'Pragma': 'no-cache',
        'Cache-Control': 'no-cache',
        'X-Requested-With': 'XMLHttpRequest'
      };

      // Log removido: Edge Function chamada √© silenciosa
      
      // üîÑ USAR SISTEMA DE RETRY para Edge Function
      const authResponse = await retryBlazeRequest(async () => {
        return await fetch('https://pcwekkqhcipvghvqvvtu.supabase.co/functions/v1/blaze-auth', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!}`
          },
          body: JSON.stringify({
            action: 'generate-tokens',
            blazeToken: tokenResult.token,
            userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            acceptLanguage: 'pt-BR,pt;q=0.9,en;q=0.8',
            selectedCurrencyType: 'BRL',
            realBrowserHeaders: realBrowserHeaders
          })
        });
      }, 'edge-function-renewal');

      // üîß NOVO: Log detalhado da resposta da Edge Function removido
      // addWebSocketLog(userId, `üì° Edge Function respondeu com status: ${authResponse.status}`, 'info');

      if (!authResponse.ok) {
        const errorText = await authResponse.text();
        addWebSocketLog(userId, `‚ùå Edge Function falhou: ${authResponse.status} - ${errorText}`, 'error');
        
        // üîß NOVO: Verificar se √© erro de bloqueio geogr√°fico ou rate limit
        if (authResponse.status === 451) {
          addWebSocketLog(userId, 'üåç Erro 451: Bloqueio geogr√°fico detectado', 'error');
        } else if (authResponse.status === 429) {
          addWebSocketLog(userId, '‚è∞ Erro 429: Rate limit - aguardando pr√≥xima janela de renova√ß√£o', 'error');
        }
        
        return false;
      }

      const authResult = await authResponse.json();
      
      // üîß NOVO: Log detalhado da resposta removido
      // addWebSocketLog(userId, `üìã Edge Function retornou: ${authResult.success ? 'SUCCESS' : 'FAILED'}`, 'info');
      
      if (!authResult.success || !authResult.data) {
        addWebSocketLog(userId, `‚ùå Edge Function falhou: ${authResult.error || 'Resposta inv√°lida'}`, 'error');
        return false;
      }

      // üîß NOVO: Validar se os tokens s√£o v√°lidos
      if (!authResult.data.jsessionId || !authResult.data.ppToken) {
        addWebSocketLog(userId, '‚ùå Tokens inv√°lidos recebidos da Edge Function', 'error');
        return false;
      }

      // Atualizar dados da sess√£o silenciosamente
      session.jsessionId = authResult.data.jsessionId;
      session.ppToken = authResult.data.ppToken;
      session.pragmaticUserId = authResult.data.pragmaticUserId;
      session.lastRenewal = Date.now();
      session.renewalAttempts = 0;
      
      // Logs removidos: renova√ß√£o √© silenciosa
      // addWebSocketLog(userId, '‚úÖ Sess√£o renovada com sucesso - reconectando WebSocket', 'success');
      // addWebSocketLog(userId, `üîó jsessionId: ${authResult.data.jsessionId.substring(0, 10)}...`, 'info');
      
      // üîÑ CR√çTICO: Reconectar WebSocket com novo jsessionId
      if (activeWebSockets[userId]) {
        // Log removido: reconex√£o silenciosa
        // addWebSocketLog(userId, 'üîÑ Reconectando WebSocket com novo jsessionId...', 'info');
        
        // Fechar conex√£o atual
        const currentWs = activeWebSockets[userId];
        currentWs.ws.close();
        delete activeWebSockets[userId];
        
        // Conectar com novo jsessionId (preservando todos os dados)
        const newConfig = {
          jsessionId: authResult.data.jsessionId,
          pragmaticUserId: authResult.data.pragmaticUserId,
          tableId: 'mrbras531mrbr532'
        };
        
        // Pequeno delay para garantir fechamento limpo
        setTimeout(() => {
          startWebSocketConnection(userId, newConfig);
          addWebSocketLog(userId, '‚úÖ Conex√£o renovada com sucesso', 'success');
          addWebSocketLog(userId, '‚úÖ Conex√£o est√°vel', 'success');
        }, 1000);
      }
      
      // ‚è∞ Mostrar pr√≥ximo hor√°rio de renova√ß√£o autom√°tica removido
      // const renewal = autoRenewal[userId];
      // if (renewal) {
      //   const nextRenewal = new Date(renewal.nextRenewalTime).toLocaleTimeString();
      //   addWebSocketLog(userId, `‚è∞ Pr√≥xima renova√ß√£o autom√°tica: ${nextRenewal}`, 'info');
      // }
      
      return true;

    } catch (edgeFunctionError) {
      const errorMessage = edgeFunctionError instanceof Error ? edgeFunctionError.message : 'Erro desconhecido';
      addWebSocketLog(userId, `‚ùå Erro na Edge Function: ${errorMessage}`, 'error');
      return false;
    }

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    addWebSocketLog(userId, `‚ùå Erro geral na renova√ß√£o: ${errorMessage}`, 'error');
    return false;
  }
}

// üÜï FUN√á√ÉO REMOVIDA: verifyTokenAfterDefeat - substitu√≠da por sistema autom√°tico
// A renova√ß√£o agora √© feita automaticamente a cada 10 minutos
// async function verifyTokenAfterDefeat(userId: string): Promise<boolean> {
//   return true; // N√£o verifica mais - usa sistema autom√°tico
// }

// NOVO: Conectar ao WebSocket
async function connectToBettingGame(userId: string, tipValue?: number, clientIP?: string, userFingerprint?: any, clientHeaders?: any, authTokens?: { ppToken: string; jsessionId: string; pragmaticUserId: string }, forceClientSideAuth?: boolean, customMartingaleSequence?: number[], stakeBased?: boolean, m4DirectBetType?: 'await' | 'red' | 'black' | 'even' | 'odd' | 'low' | 'high', isStandbyMode?: boolean) {
  try {
    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
    // addWebSocketLog(userId, 'üîó Iniciando conex√£o...', 'info');
    
    // Limpar status anterior e parar conex√µes existentes (preservando sess√£o se existir)
    const hasExistingSession = sessionControl[userId] != null;
    stopAllConnections(userId, false, hasExistingSession);
    resetReconnectionControl(userId);
    
    // üîê Etapa 1: APENAS autentica√ß√£o client-side (IP real do usu√°rio)
    
    if (!authTokens || !authTokens.ppToken || !authTokens.jsessionId) {
      addWebSocketLog(userId, '‚ùå Tokens client-side obrigat√≥rios n√£o fornecidos', 'error');
      addWebSocketLog(userId, 'üí° Certifique-se de que a autentica√ß√£o client-side foi executada no browser', 'info');
      return NextResponse.json({
        success: false,
        error: 'Tokens de autentica√ß√£o client-side s√£o obrigat√≥rios. Execute a autentica√ß√£o no browser primeiro.',
        needsClientAuth: true
      });
    }

    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
    // addWebSocketLog(userId, 'üîê Usando APENAS tokens do client-side (IP real do usu√°rio)...', 'info');
    const authResult = await validateClientTokens(userId, authTokens);
    if (!authResult.success) {
      let errorMsg = `Falha na autentica√ß√£o: ${authResult.error}`;
      let needsTokenUpdate = false;
      
      // Melhorar mensagem para token expirado
      if (authResult.error?.includes('ppToken') || authResult.error?.includes('token da Blaze')) {
        errorMsg = 'Token da Blaze expirado. Acesse /config para atualizar seu token.';
        needsTokenUpdate = true;
      }
      
      addWebSocketLog(userId, errorMsg, 'error');
      updateConnectionStatus(userId, false, errorMsg);
      return NextResponse.json({
        success: false,
        error: errorMsg,
        needsTokenUpdate,
        redirectTo: needsTokenUpdate ? '/config' : undefined
      });
    }

    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
    // addWebSocketLog(userId, 'Autentica√ß√£o realizada com sucesso', 'success');

    // ‚úÖ NOVO: Inicializar controle de sess√£o para renova√ß√£o autom√°tica
    sessionControl[userId] = {
      jsessionId: authResult.data!.jsessionId,
      ppToken: authResult.data!.ppToken,
      pragmaticUserId: authResult.data!.userId,
      createdAt: Date.now(),
      lastRenewal: Date.now(),
      renewalAttempts: 0,
      maxRenewalAttempts: 3
    };

    // ‚è∞ Inicializar sistema de renova√ß√£o autom√°tica
    initializeAutoRenewal(userId);

    // ‚úÖ NOVA L√ìGICA: Usar sequ√™ncia personalizada se fornecida, sen√£o calcular baseada no tipValue
    let calculatedSequence: number[];
    let strategyLabel: string;
    
    if (customMartingaleSequence && stakeBased) {
      // üí∞ Usar sequ√™ncia personalizada baseada em stake
      calculatedSequence = customMartingaleSequence;
      const stake = customMartingaleSequence[0];
      strategyLabel = `Stake R$ ${stake.toFixed(2)}`;
      // Log removido: informa√ß√£o t√©cnica desnecess√°ria
    // addWebSocketLog(userId, `üí∞ Sequ√™ncia Personalizada (Stake R$ ${stake.toFixed(2)}) - M1-M4: [${calculatedSequence.map((v: number) => v.toFixed(2)).join(', ')}]`, 'info');
    } else {
      // ‚úÖ Calcular sequ√™ncia baseada no tipValue usando as evolu√ß√µes
      const findEvolutionByStake = (stake: number) => {
        return STAKE_EVOLUTIONS.find(e => e.m1 === stake) || STAKE_EVOLUTIONS[0];
      };

      const evolution = findEvolutionByStake(tipValue || 1.00);
      calculatedSequence = [evolution.m1, evolution.m2];
      strategyLabel = `Evolu√ß√£o ${evolution.id} - M1: R$ ${evolution.m1.toFixed(2)} | M2: R$ ${evolution.m2.toFixed(2)}`;
      // Log removido: informa√ß√£o t√©cnica desnecess√°ria
    // addWebSocketLog(userId, `üéØ Estrat√©gia ${strategyLabel}`, 'info');
    }

    const strategy = {
      sequences: calculatedSequence,
      maxMartingale: 4
    };

    // Sistema simplificado
    
    // Inicializar estados (Nova L√≥gica de Aquecimento)
    gameResults[userId] = [];
    isFirstConnection[userId] = true; // Marcar como primeira conex√£o
    
    // üîç NOVO: Preservar configura√ß√µes de progress√£o autom√°tica se existirem
    const existingAutoProgressionEnabled = operationState[userId]?.autoProgressionEnabled || false;
    const existingInitialStakeIndex = operationState[userId]?.initialStakeIndex || 0;
    const existingCurrentStakeIndex = operationState[userId]?.currentStakeIndex || 0;
    
    operationState[userId] = {
    active: false,
    martingaleLevel: 0,
    waitingForResult: false,
    currentBetColor: undefined, // ‚úÖ CORRE√á√ÉO: Inicializar cor da aposta
    lastBetAmount: undefined, // ‚úÖ NOVO: Armazenar valor real da √∫ltima aposta
    
    strategy: {
      sequences: calculatedSequence,
      maxMartingale: 2
    },
    // üöÄ NOVO: Preservar configura√ß√µes de progress√£o autom√°tica
    autoProgressionEnabled: existingAutoProgressionEnabled,
    initialStakeIndex: existingInitialStakeIndex,
    currentStakeIndex: existingCurrentStakeIndex,
    // üîç SISTEMA SIMPLIFICADO: Removido analysisCounters
    stats: {
      totalBets: 0,
      wins: 0,
      losses: 0,
      profit: 0,
      startedAt: Date.now()
    },
    // üî• NOVO: Campo para M4 Direto
    m4DirectBetType: m4DirectBetType || 'await'
    };
    
    // Iniciar conex√£o WebSocket
    const config = {
      jsessionId: authResult.data!.jsessionId,
      pragmaticUserId: authResult.data!.userId,
      tableId: 'mrbras531mrbr532'
    };

    startWebSocketConnection(userId, config, undefined, clientIP, userFingerprint);

    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
    // addWebSocketLog(userId, 'WebSocket iniciado para coleta de dados', 'success');
      
      return NextResponse.json({
        success: true,
        data: {
        connected: true,
        message: 'Conectado ao WebSocket da Pragmatic Play',
        config,
        readyForBetting: true
      }
    });

  } catch (error) {
    const errorMsg = `Erro na conex√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}`;
    addWebSocketLog(userId, errorMsg, 'error');
    updateConnectionStatus(userId, false, errorMsg);
    return NextResponse.json({
      success: false,
      error: errorMsg
    });
  }
}

// NOVO: Iniciar opera√ß√£o simplificada (Nova L√≥gica de Aquecimento)
async function startSimpleOperation(userId: string) {
  try {
    // Verificar se opera√ß√£o j√° existe
    if (!operationState[userId]) {
      return NextResponse.json({
        success: false,
        error: 'Estado da opera√ß√£o n√£o encontrado. Conecte primeiro.'
      });
    }
    
    // ‚úÖ NOVO: Limpar logs antigos para evitar confus√£o
    websocketLogs[userId] = [];
    
    // üöÄ PRIMEIRO LOG: Iniciando opera√ß√µes
    addWebSocketLog(userId, 'üöÄ Iniciando opera√ß√µes...', 'success');
    
    // üéØ NOVO: Informar sobre prote√ß√£o contra miss√£o cumprida
    addWebSocketLog(userId, 'üõ°Ô∏è Prote√ß√£o ativa: Sistema para automaticamente ap√≥s miss√£o cumprida', 'info');
    
    // üöÄ NOVO: Resetar contador de progress√£o autom√°tica ao iniciar opera√ß√£o
    // üöÄ REMOVIDO: resetProgressionCounter(userId) - fun√ß√£o removida
    
    // üöÄ NOVO: Marcar que deve tentar apostar imediatamente
    shouldTryImmediateBet[userId] = true;
    
    // üîß CORRE√á√ÉO: Usar reset seguro que preserva autentica√ß√£o
    const isFirstConn = isFirstConnection[userId] || false;
    resetOperationSafely(userId, 'Nova opera√ß√£o iniciada', isFirstConn);
    
    // Marcar que n√£o √© mais primeira conex√£o
    isFirstConnection[userId] = false;
    
    // ‚úÖ Inicializar opera√ß√£o
    operationState[userId] = {
      ...operationState[userId],
      active: true,
      martingaleLevel: 0, // Inicia no M1
      waitingForResult: false,
      currentBetColor: undefined, // ‚úÖ CORRE√á√ÉO: Limpar cor da aposta
      missionCompleted: false, // üéØ NOVO: Resetar flag de miss√£o cumprida
      
    };
    
    // üìä NOVO: Polling ser√° iniciado automaticamente quando houver apostas pendentes
    
    // Logs de modo an√°lise removidos - sistema simplificado
    // addWebSocketLog(userId, `üîç AN√ÅLISE - Opera√ß√£o iniciada em modo aquecimento!`, 'success');
    // addWebSocketLog(userId, `üéØ NOVA REGRA: Qualquer n√≠vel que atingir o m√≠nimo ativa o modo real IMEDIATAMENTE!`, 'info');
    // addWebSocketLog(userId, `üìä Limiares: M1‚â•8 vit√≥rias, M2‚â•4 vit√≥rias, M3‚â•2 vit√≥rias, M4‚â•1 DERROTA`, 'info');
    
    // Mostrar tipo de aposta selecionado ao inv√©s de fixo
    const betTypeNames = {
      'await': 'AGUARDAR',
      'red': 'VERMELHO',
      'black': 'PRETO', 
      'even': 'PAR',
      'odd': '√çMPAR',
      'low': 'BAIXAS (1-18)',
      'high': 'ALTAS (19-36)'
    };
    const selectedBetType = operationState[userId]?.m4DirectBetType || 'await';
    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
    // addWebSocketLog(userId, `üéØ Tipo de aposta selecionado: ${betTypeNames[selectedBetType as keyof typeof betTypeNames]}`, 'info');
    
    // ‚úÖ Tentar apostar imediatamente - SEMPRE tentar quando opera√ß√£o inicia
    const bettingWindow = bettingWindowState[userId];
    
    // üéØ VERIFICA√á√ÉO: N√£o apostar se miss√£o j√° foi cumprida
    if (operationState[userId]?.missionCompleted) {
      addWebSocketLog(userId, `üõ°Ô∏è Miss√£o cumprida - n√£o executando apostas autom√°ticas`, 'info');
      return NextResponse.json({
        success: true,
        data: {
          operationActive: false,
          missionCompleted: true,
          message: 'Miss√£o cumprida - sistema protegido'
        }
      });
    }
    
    // Buscar WebSocket ativo para executar aposta
    const activeWS = activeWebSockets[userId];
    if (activeWS?.ws && activeWS.ws.readyState === 1) { // 1 = OPEN
      if (bettingWindow?.isOpen && bettingWindow.currentGameId) {
        // Apostas abertas detectadas - usar gameId conhecido
        addWebSocketLog(userId, `üéØ Apostas abertas detectadas - tentando apostar imediatamente`, 'success');
        executeSimpleBet(userId, bettingWindow.currentGameId, activeWS.ws);
      } else {
        // Apostas podem estar abertas mas estado ainda n√£o foi detectado - tentar apostar mesmo assim
        addWebSocketLog(userId, `üöÄ Tentando apostar imediatamente (pode estar fora do per√≠odo de apostas)`, 'info');
        
        // Gerar gameId tempor√°rio para tentar apostar
        const tempGameId = `temp_${Date.now()}`;
        executeSimpleBet(userId, tempGameId, activeWS.ws);
      }
    } else {
      // Log removido: WebSocket j√° est√° conectado quando necess√°rio
      // addWebSocketLog(userId, `‚ö†Ô∏è WebSocket n√£o dispon√≠vel para aposta imediata - aguardando conex√£o`, 'error');
    }
    
    return NextResponse.json({
      success: true,
      data: {
        operationActive: true,
        message: 'Opera√ß√£o iniciada - apostas reais baseadas em contadores'
      }
    });

  } catch (error) {
    return NextResponse.json({
      success: false,
      error: 'Erro ao iniciar opera√ß√£o'
    });
  }
}

// NOVO: Parar opera√ß√£o
async function stopSimpleOperation(userId: string) {
  try {
    // Finalizar opera√ß√£o
    
    // Parar opera√ß√£o de apostas
    if (operationState[userId]) {
      operationState[userId].active = false;
      operationState[userId].waitingForResult = false;
      operationState[userId].currentBetColor = undefined; // ‚úÖ CORRE√á√ÉO: Limpar cor da aposta
      operationState[userId].lastBetAmount = undefined; // ‚úÖ NOVO: Limpar valor da aposta
      // üéØ NOVO: Resetar flag de miss√£o cumprida quando usu√°rio para manualmente
      operationState[userId].missionCompleted = false;
    }
    
    // üöÄ NOVO: Limpar flag de aposta imediata
    shouldTryImmediateBet[userId] = false;
    
    // üîÑ NOVO: Limpar controle de log do modo aguardar
    awaitModeLogShown[userId] = false;
    
    // üîÑ PARAR: Polling da URL/API
    stopApiPolling(userId);
    
    // Parar todas as conex√µes
    stopAllConnections(userId, true);
    
    addWebSocketLog(userId, 'üõë Opera√ß√£o e conex√µes paradas pelo usu√°rio', 'info');
    
    return NextResponse.json({
      success: true,
      data: {
        operationActive: false,
        connected: false,
        message: 'Opera√ß√£o parada com sucesso'
      }
    });

  } catch (error) {
    return NextResponse.json({
      success: false,
      error: 'Erro ao parar opera√ß√£o'
    });
  }
}

// üíæ FUN√á√ÉO: Reconectar com novos tokens COM BACKUP DE ESTADO
async function reconnectWithNewTokens(userId: string, userIP?: string, userFingerprint?: any) {
  try {
    // üíæ CRIAR BACKUP antes de reconectar (se opera√ß√£o ativa)
    if (operationState[userId]?.active) {
      // Removido: backup simplificado
    }

    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
    // addWebSocketLog(userId, `üîë Gerando novos tokens para reconex√£o...`, 'info');
    
    // ‚úÖ USAR FUN√á√ÉO EXISTENTE: getUserBlazeToken do auth.ts
    const tokenResult = await getUserBlazeToken(userId);
    
    if (!tokenResult.success || !tokenResult.token) {
      addWebSocketLog(userId, `‚ùå Token da Blaze n√£o encontrado: ${tokenResult.error}`, 'error');
      addWebSocketLog(userId, `üí° Configure seu token da Blaze na p√°gina de configura√ß√µes`, 'info');
      updateConnectionStatus(userId, false, 'Token da Blaze n√£o encontrado');
      return;
    }

    // Logs removidos: informa√ß√µes t√©cnicas desnecess√°rias
    // addWebSocketLog(userId, `üöÄ Gerando novos tokens via Supabase Edge Function...`, 'info');
    // addWebSocketLog(userId, `üåç Edge Function resolve bloqueio geogr√°fico`, 'info');

    const realBrowserHeaders = {
      'sec-ch-ua': '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"macOS"',
      'DNT': '1',
      'Upgrade-Insecure-Requests': '1',
      'Pragma': 'no-cache',
      'Cache-Control': 'no-cache',
      'X-Requested-With': 'XMLHttpRequest'
    };

    // ‚úÖ USAR EDGE FUNCTION COM RETRY: Chamar diretamente a Supabase Edge Function
    const authResponse = await retryBlazeRequest(async () => {
      return await fetch('https://pcwekkqhcipvghvqvvtu.supabase.co/functions/v1/blaze-auth', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!}`
        },
        body: JSON.stringify({
          action: 'generate-tokens',
          blazeToken: tokenResult.token,
          userAgent: userFingerprint?.userAgent || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
          acceptLanguage: userFingerprint?.language || 'pt-BR,pt;q=0.9,en;q=0.8',
          selectedCurrencyType: 'BRL',
          realBrowserHeaders: realBrowserHeaders
        })
      });
    }, 'edge-function-reconnect');

    if (!authResponse.ok) {
      const errorText = await authResponse.text();
      addWebSocketLog(userId, `‚ùå Erro na Edge Function: ${authResponse.status} - ${errorText}`, 'error');
      updateConnectionStatus(userId, false, 'Erro na Edge Function');
      return;
    }

    const authResult = await authResponse.json();
    
    if (!authResult.success || !authResult.data) {
      addWebSocketLog(userId, `‚ùå Falha na Edge Function: ${authResult.error}`, 'error');
      updateConnectionStatus(userId, false, 'Falha na gera√ß√£o de novos tokens');
      return;
    }

    addWebSocketLog(userId, `‚úÖ Novos tokens gerados via Edge Function para reconex√£o`, 'success');
    
    // ‚úÖ RECONECTAR: Usar novos tokens
    const newConfig = {
      jsessionId: authResult.data.jsessionId,
      pragmaticUserId: authResult.data.pragmaticUserId,
      tableId: 'mrbras531mrbr532'
    };

    // Fechar conex√£o atual se existir (preservando sess√£o)
    if (activeWebSockets[userId]) {
      activeWebSockets[userId].ws.close();
      delete activeWebSockets[userId];
    }

    addWebSocketLog(userId, `üîÑ Reconectando com novos tokens...`, 'info');
    
    // Conectar novamente
    startWebSocketConnection(userId, newConfig, undefined, userIP, userFingerprint);
    
    // üîß CORRE√á√ÉO: Marcar que n√£o √© mais primeira conex√£o
    isFirstConnection[userId] = false;
    
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    addWebSocketLog(userId, `‚ùå Erro ao gerar novos tokens: ${errorMessage}`, 'error');
    addWebSocketLog(userId, `üí° Para reconectar, configure novamente na p√°gina de configura√ß√µes`, 'info');
    updateConnectionStatus(userId, false, 'Erro na reconex√£o');
  }
}

// NOVO: Iniciar conex√£o WebSocket simplificada
function startWebSocketConnection(userId: string, config: { jsessionId: string; pragmaticUserId: string; tableId: string }, customServerUrl?: string, userIP?: string, userFingerprint?: any) {
  try {
    // Inicializar controle de reconex√£o se n√£o existir
    if (!reconnectionControl[userId]) {
      reconnectionControl[userId] = {
        attempts: 0,
        lastAttempt: 0,
        maxAttempts: 5,
        backoffDelay: 5000
      };
    }

    const control = reconnectionControl[userId];
    const now = Date.now();

    // Verificar se excedeu tentativas m√°ximas
    if (control.attempts >= control.maxAttempts) {
      addWebSocketLog(userId, `‚ùå M√°ximo de tentativas de reconex√£o atingido (${control.maxAttempts})`, 'error');
      updateConnectionStatus(userId, false, 'M√°ximo de tentativas de reconex√£o atingido');
      return;
    }

    // Incrementar tentativas apenas se for uma reconex√£o (n√£o primeira conex√£o)
    if (control.attempts > 0 || control.lastAttempt > 0) {
      control.attempts++;
    }
    control.lastAttempt = now;

    // Usar a mesma URL e configura√ß√£o que funciona na API de refer√™ncia (ou servidor customizado para switch)
    const baseUrl = customServerUrl || 'wss://gs9.pragmaticplaylive.net/game';
    const wsUrl = `${baseUrl}?JSESSIONID=${config.jsessionId}&tableId=${config.tableId}`;
    
    // Logs removidos: informa√ß√µes t√©cnicas desnecess√°rias
    // addWebSocketLog(userId, `üîó Conectando ao WebSocket (tentativa ${control.attempts}/${control.maxAttempts}): ${wsUrl}`, 'info');
    // if (userIP) {
    //   addWebSocketLog(userId, `üåê IP do usu√°rio detectado: ${userIP}`, 'info');
    // }
    
    // ‚úÖ MELHORADO: Headers completamente realistas usando dados do usu√°rio
    const realHeaders = {
      // Headers b√°sicos da Pragmatic
      'Origin': 'https://client.pragmaticplaylive.net',
      'User-Agent': userFingerprint?.userAgent || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
      'Accept-Language': userFingerprint?.language || 'pt-BR,pt;q=0.9,en;q=0.8',
      'Sec-WebSocket-Version': '13',
      'Sec-WebSocket-Protocol': 'chat',
      
      // Headers realistas do navegador
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'Sec-Fetch-Mode': 'websocket',
      'Sec-Fetch-Site': 'cross-site',
      
      // Headers de IP (m√∫ltiplos para garantir que chegue)
      ...(userIP && userIP !== 'unknown' && {
        'X-Forwarded-For': userIP,
        'X-Real-IP': userIP,
        'X-Client-IP': userIP,
        'CF-Connecting-IP': userIP,
        'True-Client-IP': userIP,
        'X-Original-IP': userIP
      }),
      
      // Headers personalizados com dados reais do navegador
      ...(userFingerprint?.timezone && { 'X-User-Timezone': userFingerprint.timezone }),
      ...(userFingerprint?.platform && { 'X-User-Platform': userFingerprint.platform }),
      ...(userFingerprint?.screenResolution && { 'X-User-Screen': userFingerprint.screenResolution }),
      ...(userFingerprint?.colorDepth && { 'X-User-ColorDepth': userFingerprint.colorDepth.toString() }),
      ...(userFingerprint?.hardwareConcurrency && { 'X-User-Cores': userFingerprint.hardwareConcurrency.toString() }),
      ...(userFingerprint?.connectionType && { 'X-User-Connection': userFingerprint.connectionType })
    };
    
    // Logs removidos: informa√ß√µes t√©cnicas desnecess√°rias sobre headers
    // if (!activeWebSockets[userId]) {
    //   addWebSocketLog(userId, `üåê Headers enviados para Pragmatic (primeira conex√£o):`, 'info');
    //   addWebSocketLog(userId, `üì± User-Agent: ${realHeaders['User-Agent']}`, 'info');
    //   addWebSocketLog(userId, `üåç IP Headers: ${userIP ? 'Enviado' : 'Indispon√≠vel'}`, 'info');
    //   addWebSocketLog(userId, `üó£Ô∏è Idioma: ${realHeaders['Accept-Language']}`, 'info');
    //   if (userFingerprint?.timezone) addWebSocketLog(userId, `üïê Timezone: ${userFingerprint.timezone}`, 'info');
    //   if (userFingerprint?.platform) addWebSocketLog(userId, `üñ•Ô∏è Plataforma: ${userFingerprint.platform}`, 'info');
    // }

    const ws = new WebSocket(wsUrl, {
      headers: realHeaders
    });

    let connectionHealthy = true;
    let lastPong = Date.now();
    let pingInterval: NodeJS.Timeout | null = null;
    
    ws.on('open', () => {
      // Log removido: informa√ß√£o t√©cnica desnecess√°ria
      // addWebSocketLog(userId, 'üîó WebSocket conectado com sucesso', 'success');
      updateConnectionStatus(userId, true);
      
      // Removido: restore simplificado
      
      // Resetar contador de tentativas ap√≥s conex√£o bem-sucedida
      if (reconnectionControl[userId]) {
        reconnectionControl[userId].attempts = 0;
      }
      
      // N√£o √© necess√°rio enviar login neste servidor
      // Log removido: informa√ß√£o t√©cnica desnecess√°ria
      // addWebSocketLog(userId, 'Conex√£o estabelecida - aguardando mensagens...', 'info');
      
      // Enviar primeiro ping imediatamente ap√≥s conex√£o
      setTimeout(() => {
        if (ws.readyState === WebSocket.OPEN) {
          const timestamp = Date.now();
          const pingMessage = `<ping time='${timestamp}'></ping>`;
          ws.send(pingMessage);
          
          // Log removido: informa√ß√£o t√©cnica desnecess√°ria
          // addWebSocketLog(userId, `üèì Ping inicial enviado: ${timestamp}`, 'info');
        }
      }, 1000); // Aguardar 1 segundo ap√≥s conex√£o
      
      // Iniciar sistema de ping/pong
      pingInterval = setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
          const timestamp = Date.now();
          const pingMessage = `<ping time='${timestamp}'></ping>`;
          ws.send(pingMessage);
          
          // Log removido: informa√ß√£o t√©cnica desnecess√°ria
          // addWebSocketLog(userId, `üèì Ping enviado: ${timestamp}`, 'info');
          
          // Verificar sa√∫de da conex√£o
          const timeSincePong = Date.now() - lastPong;
          if (timeSincePong > 60000) { // 1 minuto sem pong
            addWebSocketLog(userId, `‚ö†Ô∏è Conex√£o pode estar inativa (${Math.round(timeSincePong/1000)}s sem pong)`, 'error');
            connectionHealthy = false;
            
            if (timeSincePong > 120000) { // 2 minutos sem pong
              addWebSocketLog(userId, 'üíÄ Conex√£o morta detectada - reconectando...', 'error');
              ws.close();
            }
          }
        } else {
          // Log removido: informa√ß√£o t√©cnica desnecess√°ria
        }
      }, 30000); // Ping a cada 30 segundos
    });

    ws.on('message', async (data: any) => {
      try {
        const message = data.toString().trim();
        
        // Logs removidos: mensagens t√©cnicas desnecess√°rias
        // if (message.length < 200) {
        //   addWebSocketLog(userId, `üì® Mensagem recebida: ${message}`, 'info');
        // } else {
        //   addWebSocketLog(userId, `üì® Mensagem recebida: ${message.substring(0, 100)}...`, 'info');
        // }

        // üíæ DETEC√á√ÉO: Sess√£o offline = tokens expirados COM BACKUP
        if (message.includes('<session>offline</session>')) {
          addWebSocketLog(userId, `üîë Sess√£o offline detectada - tokens expiraram`, 'error');
          
          // Removido: backup simplificado
          
          // Log removido: informa√ß√£o t√©cnica desnecess√°ria
          // addWebSocketLog(userId, `üîÑ Gerando novos tokens automaticamente...`, 'info');
          
          // Limpar ping interval
          if (pingInterval) {
            clearInterval(pingInterval);
            pingInterval = null;
          }
          
          // Fechar conex√£o atual
          ws.close();
          
          // Gerar novos tokens e reconectar
          setTimeout(async () => {
            await reconnectWithNewTokens(userId, userIP, userFingerprint);
          }, 2000); // Aguardar 2 segundos antes de reconectar
          
          return; // Sair da fun√ß√£o
        }

        // Processar pong
      if (message.includes('<pong')) {
          lastPong = Date.now();
        connectionHealthy = true;
          const timeMatch = message.match(/time="([^"]*)"/);
        const seqMatch = message.match(/seq="([^"]*)"/);
          // Log removido: informa√ß√£o t√©cnica desnecess√°ria
          // addWebSocketLog(userId, `üíì Pong recebido (time: ${timeMatch?.[1]}, seq: ${seqMatch?.[1]})`, 'success');
          return;
      }

        // Detectar switch de servidor - CR√çTICO para manter conex√£o
        if (message.includes('<switch') && message.includes('gameServer=')) {
          const gameServerMatch = message.match(/gameServer="([^"]*)"/);
          const wsAddressMatch = message.match(/wsAddress="([^"]*)"/);
          
          if (gameServerMatch && wsAddressMatch) {
            const newServer = gameServerMatch[1];
            const newWsAddress = wsAddressMatch[1];
            
            // Log removido: informa√ß√£o t√©cnica desnecess√°ria
          // addWebSocketLog(userId, `üîÑ Switch de servidor detectado: ${newServer} (${newWsAddress})`, 'info');
            
            // Limpar ping interval
            if (pingInterval) {
              clearInterval(pingInterval);
              pingInterval = null;
            }
            
            // Fechar conex√£o atual
            ws.close();
            
            // ‚úÖ CORRE√á√ÉO: Switch de servidor usando nova arquitetura de proxy
            setTimeout(async () => {
              // Log removido: informa√ß√£o t√©cnica desnecess√°ria
          // addWebSocketLog(userId, `üîë Gerando novos tokens para switch de servidor...`, 'info');
              
              try {
                // ‚úÖ USAR EDGE FUNCTION: Gerar novos tokens via Supabase Edge Function
                const tokenResult = await getUserBlazeToken(userId);
                
                if (!tokenResult.success || !tokenResult.token) {
                  addWebSocketLog(userId, `‚ùå Token da Blaze n√£o encontrado: ${tokenResult.error}`, 'error');
                  updateConnectionStatus(userId, false, 'Token da Blaze n√£o encontrado');
                  return;
                }

                // Logs removidos: informa√ß√µes t√©cnicas desnecess√°rias
                // addWebSocketLog(userId, `üöÄ Gerando novos tokens via Supabase Edge Function...`, 'info');
                // addWebSocketLog(userId, `üåç Edge Function resolve bloqueio geogr√°fico`, 'info');

                const realBrowserHeaders = {
                  'sec-ch-ua': '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
                  'sec-ch-ua-mobile': '?0',
                  'sec-ch-ua-platform': '"macOS"',
                  'DNT': '1',
                  'Upgrade-Insecure-Requests': '1',
                  'Pragma': 'no-cache',
                  'Cache-Control': 'no-cache',
                  'X-Requested-With': 'XMLHttpRequest'
                };

                // ‚úÖ Chamar diretamente a Supabase Edge Function COM RETRY
                const authResponse = await retryBlazeRequest(async () => {
                  return await fetch('https://pcwekkqhcipvghvqvvtu.supabase.co/functions/v1/blaze-auth', {
                    method: 'POST',
                    headers: { 
                      'Content-Type': 'application/json',
                      'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!}`
                    },
                    body: JSON.stringify({
                      action: 'generate-tokens',
                      blazeToken: tokenResult.token,
                      userAgent: userFingerprint?.userAgent || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
                      acceptLanguage: userFingerprint?.language || 'pt-BR,pt;q=0.9,en;q=0.8',
                      selectedCurrencyType: 'BRL',
                      realBrowserHeaders: realBrowserHeaders
                    })
                  });
                }, 'edge-function-switch-server');

                if (!authResponse.ok) {
                  const errorText = await authResponse.text();
                  addWebSocketLog(userId, `‚ùå Erro na Edge Function: ${authResponse.status} - ${errorText}`, 'error');
                  updateConnectionStatus(userId, false, 'Erro na Edge Function');
                  return;
                }

                const authResult = await authResponse.json();
                
                if (!authResult.success || !authResult.data) {
                  addWebSocketLog(userId, `‚ùå Falha na Edge Function: ${authResult.error}`, 'error');
                  updateConnectionStatus(userId, false, 'Falha na gera√ß√£o de novos tokens');
                  return;
                }

                // Log removido: informa√ß√£o t√©cnica desnecess√°ria
                // addWebSocketLog(userId, `‚úÖ Novos tokens gerados via Edge Function com sucesso`, 'success');
                
                // ‚úÖ RECONECTAR: Usar novos tokens para switch de servidor
                const newConfig = {
                  jsessionId: authResult.data.jsessionId,
                  pragmaticUserId: authResult.data.pragmaticUserId,
                  tableId: 'mrbras531mrbr532'
                };

                // Fechar conex√£o atual
                if (activeWebSockets[userId]) {
                  activeWebSockets[userId].ws.close();
                  delete activeWebSockets[userId];
                }

                // Log removido: informa√ß√£o t√©cnica desnecess√°ria
                // addWebSocketLog(userId, `üîÑ Reconectando ao novo servidor: ${newWsAddress}`, 'info');
                
                // Conectar ao novo servidor
                startWebSocketConnection(userId, newConfig, newWsAddress, userIP, userFingerprint);

              } catch (error) {
                addWebSocketLog(userId, `‚ùå Erro no switch de servidor: ${error}`, 'error');
                updateConnectionStatus(userId, false, 'Erro no switch de servidor');
              }
            }, 1000);
            
            return; // Sair da fun√ß√£o para evitar processar outras mensagens
          }
        }

        // Apostas abertas
        if (message.includes('<betsopen')) {
          const gameMatch = message.match(/game="([^"]*)"/);
          const tableMatch = message.match(/table="([^"]*)"/);
          const seqMatch = message.match(/seq="([^"]*)"/);
          
          if (gameMatch) {
            const gameId = gameMatch[1];
            const table = tableMatch?.[1] || '';
            const seq = seqMatch?.[1] || '';
            
            // NOVO: Atualizar estado da janela de apostas
            bettingWindowState[userId] = {
              isOpen: true,
              currentGameId: gameId,
              lastUpdate: Date.now()
            };
            
            addWebSocketLog(userId, `üé∞ Apostas abertas - Jogo: ${gameId} (mesa: ${table}, seq: ${seq})`, 'bets-open');
            
            // Removido: sistema de pending bets simplificado
            
            // Se opera√ß√£o ativa e pronto para apostar (normal flow)
            if (operationState[userId]?.active && !operationState[userId]?.waitingForResult) {
              // üéØ VERIFICA√á√ÉO: N√£o apostar se miss√£o foi cumprida
              if (operationState[userId]?.missionCompleted) {
                addWebSocketLog(userId, `üõ°Ô∏è Miss√£o cumprida - n√£o executando apostas autom√°ticas`, 'info');
                return; // N√£o apostar se miss√£o cumprida
              }
              

              
              const isRealMode = canExitAnalysisMode(userId);
              const currentMode = isRealMode ? 'real' : 'analysis';
              // Log removido: informa√ß√£o t√©cnica desnecess√°ria
      // addWebSocketLog(userId, `üéØ Opera√ß√£o ativa detectada - executando aposta automaticamente (modo: ${currentMode})`, 'success');
              
              // üöÄ NOVO: Marcar que primeira aposta foi executada
              if (shouldTryImmediateBet[userId]) {
                addWebSocketLog(userId, `üéØ Primeira aposta executada com sucesso!`, 'success');
                shouldTryImmediateBet[userId] = false;
              }
              
              executeSimpleBet(userId, gameId, ws);
            }
          }
        }
        
        // Apostas fechadas
        if (message.includes('<betsclosed') || message.includes('<betsclose')) {
          // NOVO: Atualizar estado da janela de apostas
          if (bettingWindowState[userId]) {
            bettingWindowState[userId].isOpen = false;
            bettingWindowState[userId].lastUpdate = Date.now();
          }
          
          addWebSocketLog(userId, `üö´ Apostas fechadas`, 'bets-closed');
        }
        
        // ‚úÖ CORRE√á√ÉO: Detectar resposta de comando (aposta aceita/rejeitada) - igual ao @/bots
        if (message.includes('<command') && message.includes('status=')) {
          const statusMatch = message.match(/status="([^"]*)"/);
          const channelMatch = message.match(/channel="([^"]*)"/);
          
          if (statusMatch) {
            const status = statusMatch[1];
            const channel = channelMatch?.[1] || '';
            
            if (status === 'success') {
              addWebSocketLog(userId, `üì® Aposta aceita pelo servidor`, 'info');
              addWebSocketLog(userId, `‚è≥ Aguardando resultado...`, 'info');
            } else if (status === 'error' || status === 'fail' || status === 'denied' || status === 'refused' || status === 'rejected') {
              addWebSocketLog(userId, `‚ùå Aposta REJEITADA pelo servidor (${status})`, 'error');
              // ‚úÖ SIMPLIFICADO: Sem renova√ß√£o autom√°tica - deixar timer de 18min cuidar disso
            }
          }
        }

        // üíæ CORRE√á√ÉO: Detectar betValidationError com c√≥digos de sess√£o/autentica√ß√£o - SISTEMA PROGRAMADO
        if (message.includes('<betValidationError')) {
          // C√≥digos relacionados a sess√£o/autentica√ß√£o que exigem renova√ß√£o
          const sessionErrorCodes = ['1039', '1040', '1001', '1002', '1003'];
          const hasSessionError = sessionErrorCodes.some(code => message.includes(`code="${code}"`));
          
          if (hasSessionError) {
            const codeMatch = message.match(/code="([^"]*)"/);
            const errorCode = codeMatch?.[1] || 'unknown';
            
            addWebSocketLog(userId, `üîë Erro de sess√£o detectado (code ${errorCode}) - usando sistema autom√°tico`, 'error');
            addWebSocketLog(userId, `üìã Renova√ß√£o autom√°tica a cada 10 minutos`, 'info');
            
            // Pausar opera√ß√£o e aguardar renova√ß√£o autom√°tica
            if (operationState[userId]) {
              operationState[userId].active = false;
              operationState[userId].waitingForResult = false;
              addWebSocketLog(userId, `‚è∏Ô∏è Opera√ß√£o pausada devido a erro de sess√£o - aguardando renova√ß√£o autom√°tica`, 'info');
            }
            
            return; // N√£o processar mais esta mensagem
          } else {
            // Outros erros de valida√ß√£o de aposta (n√£o relacionados √† sess√£o)
            const codeMatch = message.match(/code="([^"]*)"/);
            const errorCode = codeMatch?.[1] || 'unknown';
            addWebSocketLog(userId, `‚ö†Ô∏è Erro de valida√ß√£o de aposta (code ${errorCode}): ${message}`, 'error');
          }
        }
        
        // üíæ Detectar outros erros de sess√£o - SISTEMA PROGRAMADO
        if (message.includes('invalid session') || message.includes('session expired') || 
            message.includes('session timeout') || message.includes('unauthorized access') ||
            message.includes('authentication failed') || message.includes('token expired')) {
          addWebSocketLog(userId, `üîë Erro de sess√£o detectado - usando sistema autom√°tico`, 'error');
          addWebSocketLog(userId, `üìã Renova√ß√£o autom√°tica a cada 10 minutos`, 'info');
          
          // Pausar opera√ß√£o e aguardar renova√ß√£o autom√°tica
          if (operationState[userId]) {
            operationState[userId].active = false;
            operationState[userId].waitingForResult = false;
            addWebSocketLog(userId, `‚è∏Ô∏è Opera√ß√£o pausada devido a erro de sess√£o - aguardando renova√ß√£o autom√°tica`, 'info');
          }
          
          return;
        }

        // ‚è∞ Verifica√ß√£o de renova√ß√£o autom√°tica a cada mensagem
        if (shouldRenewAutomatically(userId)) {
          // Logs removidos: renova√ß√£o autom√°tica √© silenciosa
          setTimeout(async () => {
            const renewed = await renewSession(userId);
            if (renewed) {
              // Reativar opera√ß√£o se estava pausada
              if (operationState[userId] && !operationState[userId].active) {
                operationState[userId].active = true;
                addWebSocketLog(userId, '‚ñ∂Ô∏è Opera√ß√£o reativada ap√≥s renova√ß√£o autom√°tica', 'success');
              }
            } else {
              addWebSocketLog(userId, '‚ùå Falha na renova√ß√£o autom√°tica', 'error');
            }
          }, 2000); // Delay maior para evitar conflito com renova√ß√£o p√≥s-aposta
        }

        // üö´ REMOVIDO: Processamento de resultados via WebSocket
        // WebSocket agora √© EXCLUSIVO para apostas (apostas abertas/fechadas)
        // Resultados s√£o processados via URL/API polling
        
      } catch (parseError) {
        addWebSocketLog(userId, `‚ùå Erro ao processar mensagem: ${parseError}`, 'error');
      }
    });
    
    ws.on('error', (error) => {
      addWebSocketLog(userId, `‚ùå Erro na conex√£o: ${error.message}`, 'error');
      updateConnectionStatus(userId, false, error.message);
      
      // Limpar ping interval em caso de erro
      if (pingInterval) {
        clearInterval(pingInterval);
        pingInterval = null;
      }
    });
    
    ws.on('close', (code, reason) => {
      // Log removido: informa√ß√£o t√©cnica desnecess√°ria
      // addWebSocketLog(userId, `üîå WebSocket desconectado (c√≥digo: ${code}, raz√£o: ${reason})`, 'error');
      updateConnectionStatus(userId, false);
      
      // Limpar ping interval
      if (pingInterval) {
        clearInterval(pingInterval);
        pingInterval = null;
      }
      
      // Tentar reconectar automaticamente se n√£o foi fechamento intencional
      if (code !== 1000 && code !== 1001) { // N√£o reconectar se foi fechamento normal/intencional
      const control = reconnectionControl[userId];
        if (control && control.attempts < control.maxAttempts) {
          addWebSocketLog(userId, `üîÑ Tentando reconectar em ${control.backoffDelay}ms...`, 'info');
              setTimeout(async () => {
            // ‚úÖ CORRE√á√ÉO: Gerar novos tokens a cada reconex√£o pois eles expiram
            await reconnectWithNewTokens(userId, userIP, userFingerprint);
          }, control.backoffDelay);
          
          // Aumentar delay para pr√≥xima tentativa
          control.backoffDelay = Math.min(control.backoffDelay * 2, 30000); // Max 30 segundos
        }
      }
    });

    // Armazenar conex√£o
    activeWebSockets[userId] = {
      ws,
      sessionId: config.jsessionId,
      createdAt: Date.now(),
      lastActivity: Date.now()
    };
    
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    addWebSocketLog(userId, `‚ùå Erro ao conectar: ${errorMessage}`, 'error');
    updateConnectionStatus(userId, false, errorMessage);
  }
}

// üî• NOVO: Mapeamento completo de tipos de aposta para c√≥digos (CORRIGIDO)
const BET_TYPE_TO_CODE: { [key: string]: string } = {
  'red': '48',    // vermelho
  'black': '49',  // preto
  'odd': '50',    // √≠mpar
  'even': '47',   // par
  'low': '46',    // baixas
  'high': '51',   // altas
};

// üî• NOVO: Mapeamento de tipos de aposta para nomes em portugu√™s
const BET_TYPE_NAMES: { [key: string]: string } = {
  'await': 'AGUARDAR',
  'red': 'VERMELHO',
  'black': 'PRETO',
  'even': 'PAR',
  'odd': '√çMPAR',
  'low': 'BAIXAS (1-18)',
  'high': 'ALTAS (19-36)',
};

// üî• NOVO: Mapeamento de tipos de aposta para c√≥digos de cores (para retrocompatibilidade)
const BET_TYPE_TO_COLOR: { [key: string]: string } = {
  'red': 'R',
  'black': 'B',
  'even': 'E',
  'odd': 'O',
  'low': 'L',
  'high': 'H',
};

// Mapeamento de cores para c√≥digos de aposta (conforme API de refer√™ncia) - CORRIGIDO
const COLOR_TO_BET_CODE: { [key: string]: string } = {
  'R': '48', // Vermelho (Red)
  'B': '49', // Preto (Black)
  'E': '47', // Par (Even)
  'O': '50', // √çmpar (Odd)
  'L': '46', // Baixas (Low)
  'H': '51', // Altas (High)
};

// Mapeamento de cores para nomes em portugu√™s - EXPANDIDO
const COLOR_NAMES: { [key: string]: string } = {
  'AWAIT': 'AGUARDAR',
  'R': 'VERMELHO',
  'B': 'PRETO',
  'E': 'PAR',
  'O': '√çMPAR',
  'L': 'BAIXAS (1-18)',
  'H': 'ALTAS (19-36)',
};

// Fun√ß√£o robusta para enviar mensagens via WebSocket
async function sendWebSocketMessage(ws: any, message: string, userId: string): Promise<{ success: boolean; error?: string }> {
  try {
    // Verificar se WebSocket est√° conectado
    if (!ws || ws.readyState !== 1) {
      return {
        success: false,
        error: 'WebSocket n√£o est√° conectado'
      };
    }

    // M√©todo 1: Tentar envio direto (funciona em desenvolvimento)
    try {
      ws.send(message);
      return { success: true };
    } catch (directError: any) {
      
      // M√©todo 2: Tentar com Buffer (para compatibilidade com diferentes implementa√ß√µes)
      try {
        const buffer = Buffer.from(message, 'utf8');
        ws.send(buffer);
        return { success: true };
      } catch (bufferError: any) {
        
        // M√©todo 3: Tentar for√ßar como string
        try {
          const stringMessage = String(message);
          ws.send(stringMessage, { binary: false });
          return { success: true };
        } catch (stringError: any) {
          
          // M√©todo 4: Tentar usando _socket diretamente (√∫ltimo recurso)
          try {
            if (ws._socket && ws._socket.write) {
              const frame = createWebSocketFrame(message);
              ws._socket.write(frame);
              return { success: true };
            } else {
              throw new Error('_socket.write n√£o dispon√≠vel');
            }
          } catch (socketError: any) {
            addWebSocketLog(userId, `‚ùå Erro cr√≠tico na conex√£o: ${socketError.message}`, 'error');
            
            return {
              success: false,
              error: `Erro ao enviar mensagem WebSocket: ${socketError.message}`
            };
          }
        }
      }
    }
  } catch (error: any) {
    return {
      success: false,
      error: `Erro geral no WebSocket: ${error.message || 'Erro desconhecido'}`
    };
  }
}

// Fun√ß√£o para criar frame WebSocket manualmente (√∫ltimo recurso)
function createWebSocketFrame(message: string): Buffer {
  const payload = Buffer.from(message, 'utf8');
  const payloadLength = payload.length;
  
  let frame: Buffer;
  
  if (payloadLength < 126) {
    frame = Buffer.allocUnsafe(2 + payloadLength);
    frame[0] = 0x81; // FIN=1, opcode=1 (text)
    frame[1] = payloadLength;
    payload.copy(frame, 2);
  } else if (payloadLength < 65536) {
    frame = Buffer.allocUnsafe(4 + payloadLength);
    frame[0] = 0x81; // FIN=1, opcode=1 (text)
    frame[1] = 126;
    frame.writeUInt16BE(payloadLength, 2);
    payload.copy(frame, 4);
  } else {
    frame = Buffer.allocUnsafe(10 + payloadLength);
    frame[0] = 0x81; // FIN=1, opcode=1 (text)
    frame[1] = 127;
    frame.writeUInt32BE(0, 2);
    frame.writeUInt32BE(payloadLength, 6);
    payload.copy(frame, 10);
  }
  
  return frame;
}

// üì§ FUN√á√ÉO: Executar aposta COM SISTEMA DE PENDING BETS
async function executeSimpleBet(userId: string, gameId: string, ws: any) {
  const operation = operationState[userId];
  if (!operation || !operation.active || !operation.strategy?.sequences) {
    addWebSocketLog(userId, '‚ùå Estado da opera√ß√£o inv√°lido ou incompleto', 'error');
    return;
  }
  
  // üéØ VERIFICA√á√ÉO CR√çTICA: N√£o apostar se miss√£o foi cumprida
  if (operation.missionCompleted) {
    addWebSocketLog(userId, 'üõ°Ô∏è Miss√£o j√° cumprida - sistema protegido contra apostas autom√°ticas', 'info');
    addWebSocketLog(userId, 'üí° Use "Parar Opera√ß√£o" e "Iniciar Opera√ß√£o" para resetar se necess√°rio', 'info');
    return;
  }
  

  
  // üé≤ CORRE√á√ÉO: Sempre aposta no vermelho (igual ao @/bots)
  const redBet = generateRedBet();
  
  // üé≤ NOVO: Usar fun√ß√£o atualizada que suporta modo M4 direto
  const betColor = generateBet(userId);
  
  // üî• NOVO: Verificar se est√° em modo aguardar
  if (betColor === 'AWAIT') {
    // S√≥ mostrar log uma vez para evitar repeti√ß√£o
    if (!awaitModeLogShown[userId]) {
      addWebSocketLog(userId, '‚è≥ Modo aguardar ativo - Conectado mas n√£o apostando', 'info');
      awaitModeLogShown[userId] = true;
    }
    return;
  }
  
  // üî• NOVO: Log para debug do modo M4 direto
  if (operation.m4DirectBetType) {
    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üî• MODO M4 DIRETO ATIVO - Apostando em ${COLOR_NAMES[betColor]}`, 'info');
  }
  
  // ‚úÖ CORRE√á√ÉO: Armazenar cor da aposta atual no estado da opera√ß√£o
  operation.currentBetColor = betColor as 'R' | 'B' | 'E' | 'O' | 'L' | 'H';
  
  // ‚úÖ Usar valor do martingale atual (M1, M2, M3, M4)
  const betAmount = operation.strategy?.sequences?.[operation.martingaleLevel];
  
  // ‚úÖ NOVO: Armazenar valor real da aposta
  operation.lastBetAmount = betAmount;
  const betCode = COLOR_TO_BET_CODE[betColor];
  const colorName = COLOR_NAMES[betColor];
  
  if (!betCode || !colorName) {
    addWebSocketLog(userId, `‚ùå Cor inv√°lida para aposta: ${betColor}`, 'error');
    return;
  }

  try {
    // üìä Registrar rodada analisada no n√≠vel atual
    // Removido: recordAnalysisRound n√£o existe mais no sistema simplificado
    
    // üéØ NOVO: Manter dados de an√°lise para interface
    const analysisData = {
      // Removido: martingaleUsageStats n√£o existe mais
      m1: 0,
      m2: 0,
      m3: 0,
      m4: 0,
      // Removido: m4LossesCounter n√£o existe mais
      m4Losses: 0,
      // Removido: thresholds n√£o existe mais
      m1Required: 8,
      m2Required: 4,
      m3Required: 2,
      m4Required: 1,
      // Removido: smartActivation n√£o existe mais
      smartActivation: {
        enabled: false,
        readyToActivate: false,
        waitingForSequenceEnd: false
      }
    };
    
    // üí∞ REAL: Envia aposta verdadeira (limiares atingidos)
    const timestamp = Date.now().toString();
    
    // ‚úÖ CORRE√á√ÉO: Usar pragmaticUserId da sess√£o renovada, n√£o gerar novo
    const session = sessionControl[userId];
    const pragmaticUserId = session?.pragmaticUserId || `ppc${timestamp}`;
    
    if (session?.pragmaticUserId) {
      // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üîë Usando tokens da sess√£o renovada (${session.pragmaticUserId.substring(0, 8)}...)`, 'info');
    } else {
      addWebSocketLog(userId, `‚ö†Ô∏è Gerando novo pragmaticUserId (sess√£o n√£o encontrada)`, 'error');
    }
    
    // üîç NOVA VERIFICA√á√ÉO: Estado detalhado do WebSocket
    const wsState = ws.readyState;
    const stateNames = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üîå WebSocket State: ${wsState} (${stateNames[wsState] || 'UNKNOWN'})`, 'info');
    
    // üö® VERIFICA√á√ÉO CR√çTICA: WebSocket deve estar OPEN para enviar apostas
    if (wsState !== 1) { // 1 = OPEN
              addWebSocketLog(userId, `‚ùå Conex√£o n√£o est√° dispon√≠vel! Estado: ${stateNames[wsState] || 'UNKNOWN'}`, 'error');
      return;
    }
    
    const betXml = `<command channel="table-mrbras531mrbr532">
  <lpbet gm="roulette_desktop" gId="${gameId}" uId="${pragmaticUserId}" ck="${timestamp}">
    <bet amt="${betAmount}" bc="${betCode}" ck="${timestamp}" />
  </lpbet>
</command>`;

    // üöÄ NOVO: Verificar se √© gameId tempor√°rio para ajustar mensagem
    const isTemporaryGameId = gameId.startsWith('temp_');
    
    // Log da mensagem XML que ser√° enviada
    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üì§ Enviando XML: ${betXml.replace(/\n/g, ' ').replace(/\s+/g, ' ')}`, 'info');
          
    // üì§ Enviar aposta com sistema de fallback robusto
    const sendResult = await sendWebSocketMessage(ws, betXml, userId);
    if (!sendResult.success) {
      if (isTemporaryGameId) {
        addWebSocketLog(userId, `‚ö†Ô∏è Tentativa de aposta fora do per√≠odo - aguardando pr√≥xima rodada`, 'error');
      } else {
        addWebSocketLog(userId, `‚ùå Falha ao enviar aposta: ${sendResult.error}`, 'error');
      }
      return;
    }
    
    // ‚úÖ SUCESSO: Aposta enviada com sucesso
    operation.waitingForResult = true;
    operation.lastGameId = gameId;
    
    // üîÑ NOVO: Iniciar polling quando aposta √© feita
    await startApiPolling(userId);
    
    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
    // addWebSocketLog(userId, `‚úÖ Aposta enviada com sucesso via WebSocket!`, 'success');
    const modeLabel = 'üí∞ REAL';
    
    // üöÄ NOVO: Incrementar contador de progress√£o e obter status
    // üöÄ REMOVIDO: Progress√£o autom√°tica removida
    const progressionText = '';
    
    if (isTemporaryGameId) {
      addWebSocketLog(userId, `üéØ Aposta enviada: R$ ${betAmount.toFixed(2)} no ${colorName} (tentativa imediata)${progressionText}`, 'game');
    } else {
      addWebSocketLog(userId, `üéØ Aposta realizada: R$ ${betAmount.toFixed(2)} no ${colorName}${progressionText}`, 'game');
    }
    
    // ‚úÖ NOVO: Marcar timestamp da primeira aposta ap√≥s conex√£o
    if (!firstBetTimestamp[userId]) {
      firstBetTimestamp[userId] = Date.now();
    }
    
    // üéØ NOVA L√ìGICA: Verificar se precisa renovar e aproveitar momento p√≥s-aposta
    if (shouldRenewAfterBet(userId)) {
      setTimeout(async () => {
        const renewed = await renewSession(userId);
        if (renewed) {
          addWebSocketLog(userId, '‚úÖ Conex√£o renovada com sucesso', 'success');
          addWebSocketLog(userId, '‚úÖ Conex√£o est√°vel', 'success');
        } else {
          addWebSocketLog(userId, '‚ùå Falha na renova√ß√£o p√≥s-aposta', 'error');
        }
      }, 1000); // Aguardar 1s para aposta ser processada
    }
    
    // TODO: Debitar cr√©ditos quando necess√°rio
    // await debitUserCredits(userId, betAmount);

  } catch (error) {
    addWebSocketLog(userId, `‚ùå Erro ao enviar aposta: ${error instanceof Error ? error.message : 'Erro desconhecido'}`, 'error');
    
    // üì§ CRIAR APOSTA PENDENTE mesmo em caso de erro de rede
    const isRealMode = canExitAnalysisMode(userId);
    if (isRealMode) {
      // Removido: createPendingBet call
    }
  }
}

// Fun√ß√µes auxiliares
function updateConnectionStatus(userId: string, connected: boolean, error?: string) {
  connectionStatus[userId] = {
    connected,
    error,
    lastUpdate: Date.now()
  };
}

// üîç FUN√á√ÉO: Dupla valida√ß√£o de cores na roleta (sem tabela)
function validateAndCorrectColor(number: number, receivedColor: string): {
  correctedColor: string;
  hasConflict: boolean;
  logMessage: string;
} {
  // Mapeamento correto dos n√∫meros vermelhos na roleta europeia
  const redNumbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
  
  let expectedColor: string;
  if (number === 0) {
    expectedColor = 'green';
  } else {
    expectedColor = redNumbers.includes(number) ? 'red' : 'black';
  }
  
  // Normalizar cores para compara√ß√£o
  const normalizedReceived = receivedColor.toLowerCase();
  const normalizedExpected = expectedColor.toLowerCase();
  
  // Verificar se h√° conflito
  const hasConflict = normalizedReceived !== normalizedExpected;
  
  let logMessage: string;
  if (hasConflict) {
    logMessage = `üîß CORRE√á√ÉO: ${number} - WebSocket disse ${receivedColor}, corrigido para ${expectedColor}`;
  } else {
    // Log removido: informa√ß√£o t√©cnica desnecess√°ria
    logMessage = ''; // String vazia para evitar erro de compila√ß√£o
  }
  
  return {
    correctedColor: expectedColor,
    hasConflict,
    logMessage
  };
}

function getColorFromNumber(number: number): string {
  if (number === 0) return 'green';
  const redNumbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
  return redNumbers.includes(number) ? 'red' : 'black';
}

function getNumberCharacteristics(number: number): string {
  if (number === 0) return '0 Verde';
  
  const color = getColorFromNumber(number) === 'red' ? 'Vermelho' : 'Preto';
  const parity = number % 2 === 0 ? 'Par' : '√çmpar';
  const range = number <= 18 ? 'Baixo (1-18)' : 'Alto (19-36)';
  
  return `${number} ${color}, ${parity}, ${range}`;
}

async function debitUserCredits(userId: string, amount: number) {
  try {
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY!
    );

    const { error } = await supabase.rpc('debit_user_credits', {
      p_user_id: userId,
      p_amount: amount,
      p_description: `Aposta MegaRoulette - R$ ${amount}`
    });

    if (error) {
    }
  } catch (error) {
  }
}

// Fun√ß√µes auxiliares para controle de conex√£o
function resetReconnectionControl(userId: string) {
  if (reconnectionControl[userId]) {
    reconnectionControl[userId] = {
      attempts: 0,
      lastAttempt: 0,
      maxAttempts: 5,
      backoffDelay: 5000
    };
  }
}

// üîß CORRE√á√ÉO: Fun√ß√£o para reset seguro que preserva autentica√ß√£o
function resetOperationSafely(userId: string, reason: string = 'Reset autom√°tico', isFirstConnectionReset: boolean = false) {
  // üîÑ PARAR: Polling da URL/API
  stopApiPolling(userId);
  
  // Parar apenas a opera√ß√£o, sem afetar a autentica√ß√£o
  if (operationState[userId]) {
    // üîç NOVO: Salvar configura√ß√µes de progress√£o autom√°tica antes do reset
    const savedAutoProgressionEnabled = operationState[userId].autoProgressionEnabled;
    const savedInitialStakeIndex = operationState[userId].initialStakeIndex;
    const savedCurrentStakeIndex = operationState[userId].currentStakeIndex;
    
    operationState[userId].active = false;
    operationState[userId].waitingForResult = false;
    operationState[userId].currentBetColor = undefined;
    operationState[userId].lastBetAmount = undefined; // ‚úÖ NOVO: Limpar valor da aposta
    operationState[userId].martingaleLevel = 0;
    // üîß NOVO: Limpar stake pendente quando opera√ß√£o reseta
    operationState[userId].pendingStake = null;
    
    // üöÄ NOVO: Resetar progress√£o autom√°tica para √≠ndice inicial ap√≥s vit√≥ria
    if (savedAutoProgressionEnabled && savedInitialStakeIndex !== undefined) {
      const initialIndex = savedInitialStakeIndex;
      operationState[userId].currentStakeIndex = initialIndex;
      
      const initialEvolution = STAKE_EVOLUTIONS[initialIndex];
      operationState[userId].strategy.sequences = [initialEvolution.m1, initialEvolution.m2];
      
      addWebSocketLog(userId, `üöÄ Progress√£o autom√°tica: Resetando para evolu√ß√£o inicial ${initialEvolution.id}`, 'success');
      addWebSocketLog(userId, `üìä Sequ√™ncia resetada: [${operationState[userId].strategy.sequences.map(v => v.toFixed(2)).join(', ')}]`, 'info');
    }
    
    // üîç NOVO: Restaurar configura√ß√µes de progress√£o autom√°tica ap√≥s reset
    operationState[userId].autoProgressionEnabled = savedAutoProgressionEnabled;
    operationState[userId].initialStakeIndex = savedInitialStakeIndex;
    if (savedCurrentStakeIndex !== undefined) {
      operationState[userId].currentStakeIndex = savedCurrentStakeIndex;
    }
    
    // üéØ NOVO: Manter flag de miss√£o cumprida (n√£o resetar automaticamente)
    // O usu√°rio precisa iniciar nova opera√ß√£o para resetar
  }

  // Resetar dados de an√°lise
  resetAnalysisCounters(userId);
  
  // üîÑ NOVO: Limpar controle de log do modo aguardar
  awaitModeLogShown[userId] = false;
  
  // Removido: fun√ß√µes de an√°lise que n√£o existem mais no sistema simplificado
  // ‚úÖ CORRE√á√ÉO: N√ÉO resetar hist√≥rico detalhado aqui - s√≥ limpa quando p√°gina recarrega
  // resetDetailedHistory(userId);

  // üîß CORRE√á√ÉO: Coleta de resultados sempre ativa (n√£o precisa aguardar primeiro "apostas fechadas")
  // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üîÑ ${reason} - Coleta de resultados sempre ativa`, 'info');

  // Resetar estado da janela de apostas
  if (bettingWindowState[userId]) {
    delete bettingWindowState[userId];
  }
  
  // üöÄ NOVO: Limpar flag de aposta imediata
  shouldTryImmediateBet[userId] = false;

  // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üîÑ ${reason} - Dados resetados, autentica√ß√£o e hist√≥rico preservados`, 'info');
}

function stopAllConnections(userId: string, setErrorStatus: boolean = true, preserveSession: boolean = false) {
  // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `üõë Parando todas as conex√µes para usu√°rio ${userId}`, 'info');
  
  // üîÑ PARAR: Polling da URL/API
  stopApiPolling(userId);
  
  // üîÑ REMOVIDO: Timer autom√°tico - agora usa sistema programado
  // stopAutoReconnectionTimer(userId);
  
  // Parar opera√ß√£o
  if (operationState[userId]) {
    operationState[userId].active = false;
    operationState[userId].waitingForResult = false;
    operationState[userId].currentBetColor = undefined;
    // üîß NOVO: Limpar stake pendente quando opera√ß√£o para
    operationState[userId].pendingStake = null;
  }
  
  // Fechar WebSocket
  if (activeWebSockets[userId]) {
    try {
      activeWebSockets[userId].ws.close();
      // Log removido: informa√ß√£o t√©cnica desnecess√°ria
      // addWebSocketLog(userId, `üîå WebSocket fechado`, 'info');
    } catch (error) {
              addWebSocketLog(userId, `‚ö†Ô∏è Erro ao fechar conex√£o: ${error}`, 'error');
    }
    delete activeWebSockets[userId];
  }
  
  // Limpar timers de renova√ß√£o
  if (autoRenewalIntervals[userId]) {
    clearInterval(autoRenewalIntervals[userId]);
    delete autoRenewalIntervals[userId];
  }
  
  // Resetar controle de reconex√£o
  resetReconnectionControl(userId);
  
  // üîß NOVO: Limpar controle de renova√ß√£o quando parar conex√µes
  if (renewalControl[userId]) {
    addWebSocketLog(userId, 'üîß Limpando controle de renova√ß√£o', 'info');
    delete renewalControl[userId];
  }
  
  // ‚è∞ Limpar sistema de renova√ß√£o autom√°tica
  clearAutoRenewal(userId);
  
  // N√£o preservar sess√£o se n√£o especificado
  if (!preserveSession) {
    delete sessionControl[userId];
  }
  
  // Limpar controle de primeira conex√£o quando parar tudo
  if (isFirstConnection[userId]) {
    delete isFirstConnection[userId];
  }
  
  // ‚úÖ NOVO: Limpar timestamp da primeira aposta
  if (firstBetTimestamp[userId]) {
    delete firstBetTimestamp[userId];
  }
  
  // üöÄ NOVO: Limpar flag de aposta imediata
  shouldTryImmediateBet[userId] = false;
  
  // Atualizar status
  if (setErrorStatus) {
    updateConnectionStatus(userId, false, 'Conex√£o encerrada');
  }
  
  // Log removido: informa√ß√£o t√©cnica desnecess√°ria
  // addWebSocketLog(userId, `‚úÖ Todas as conex√µes foram encerradas`, 'info');
}

// Obter logs do WebSocket
async function getWebSocketLogs(userId: string) {
  try {
    const logs = websocketLogs[userId] || [];
    const results = gameResults[userId] || [];
    const status = connectionStatus[userId] || { connected: false, lastUpdate: Date.now() };
    const operation = operationState[userId];

    // NOVO: Verificar se pode iniciar opera√ß√£o (sem verifica√ß√µes complexas)
    const bettingWindow = bettingWindowState[userId];
    const bettingWindowOpen = bettingWindow?.isOpen || false;
    const canStartOperation = bettingWindowOpen && !operation?.active;

    // üöÄ NOVO: Incluir dados do operation report diretamente
    const operationReport = operation ? {
      summary: {
        totalBets: operation.stats.totalBets,
        wins: operation.stats.wins,
        losses: operation.stats.losses,
        profit: operation.stats.profit,
        winRate: operation.stats.totalBets > 0 ? parseFloat(((operation.stats.wins / operation.stats.totalBets) * 100).toFixed(2)) : 0,
        startedAt: operation.stats.startedAt
      }
    } : null;

    return NextResponse.json({
      success: true,
      data: {
        logs,
        connectionStatus: status,
        gameResults: results,
        lastTenResults: (() => {
          // ü§ñ CORRE√á√ÉO: Sempre mostrar resultados quando conectado (independente se apostou ou n√£o)
          if (results.length === 0) {
            return []; // N√£o h√° resultados para mostrar
          }
          
          // üöÄ NOVO: Mostrar √∫ltimos 10 resultados, mais recente primeiro
          return results.slice(-10).reverse().map((result: any) => ({
            number: result.number,
            color: result.color,
            gameId: result.gameId,
            timestamp: result.timestamp
          }));
        })(),
        operationActive: operation?.active || false,
        operationState: operation ? {
          mode: canExitAnalysisMode(userId) ? 'real' : 'analysis',
          martingaleLevel: operation.martingaleLevel,
          waitingForResult: operation.waitingForResult,
          stats: operation.stats,
          m4DirectBetType: operation.m4DirectBetType || 'await',
          // üîç NOVO: Status de an√°lise (sistema simplificado)
          analysisStatus: null,
          // üí∞ Status de lucro em tempo real
          profitStatus: {
            current: operation.stats.profit,
            isProfit: operation.stats.profit > 0,
            canPause: operation.stats.profit > 0, // S√≥ pode pausar se tiver lucro
            formatted: `R$ ${operation.stats.profit.toFixed(2)}`,
            status: operation.stats.profit > 0 ? 'LUCRO' : operation.stats.profit < 0 ? 'PREJU√çZO' : 'NEUTRO'
          },
          // üõë NOVO: Controle do bot√£o "parar de apostar"
          stopButtonControl: {
            canStop: !operation.waitingForResult, // S√≥ pode parar quando n√£o h√° aposta ativa
            mode: canExitAnalysisMode(userId) ? 'real' : 'analysis',
            isBlocked: operation.waitingForResult, // Bloqueia quando h√° aposta em andamento
            reason: operation.waitingForResult ? 'Aposta em andamento...' : null
          }
        } : null,
        canStartOperation,
        bettingWindow: {
          isOpen: bettingWindowOpen,
          currentGameId: bettingWindow?.currentGameId,
          lastUpdate: bettingWindow?.lastUpdate
        },
        // üìä Estat√≠sticas de uso de martingale (sistema simplificado)
        martingaleUsage: [0, 0],
        // üìä Estat√≠sticas de rodadas analisadas por n√≠vel (sistema simplificado)
        analysisRounds: [0, 0],
        // üìã Hist√≥rico detalhado de an√°lises e apostas reais
        detailedHistory: getDetailedHistory(userId),
        // üöÄ NOVO: Operation report inclu√≠do para otimizar requisi√ß√µes
        operationReport: operationReport,
        // üîß NOVO: Informa√ß√£o sobre stake pendente
        pendingStakeInfo: operation?.pendingStake ? {
          hasPendingStake: true,
          pendingStake: operation.pendingStake
        } : {
          hasPendingStake: false,
          pendingStake: null
        },
        // Debugging info - removido
        debugInfo: null,
        sessionInfo: sessionControl[userId] ? {
          hasSession: true,
          pragmaticUserId: sessionControl[userId].pragmaticUserId?.substring(0, 8) + '...',
          timeSinceLastRenewal: Date.now() - sessionControl[userId].lastRenewal,
          nextRenewalIn: 'Inativo'
        } : null,
        // Estat√≠sticas de humaniza√ß√£o removidas
        humanizationStats: null,
        // Sistema de disfarce removido - dados simplificados
        disguiseStats: null
      }
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: 'Erro ao buscar logs'
    });
  }
}

// Obter relat√≥rio da opera√ß√£o
async function getOperationReport(userId: string) {
  try {
    const operation = operationState[userId];
    
    if (!operation) {
      return NextResponse.json({
        success: true,
        data: {
          summary: {
            totalBets: 0,
        wins: 0,
        losses: 0,
            profit: 0,
            winRate: 0,
            startedAt: 0
        }
      }
    });
    }
    
    const winRate = operation.stats.totalBets > 0 ? (operation.stats.wins / operation.stats.totalBets) * 100 : 0;

    return NextResponse.json({
      success: true,
      data: {
        summary: {
          totalBets: operation.stats.totalBets,
          wins: operation.stats.wins,
          losses: operation.stats.losses,
          profit: operation.stats.profit,
          winRate: parseFloat(winRate.toFixed(2)),
          startedAt: operation.stats.startedAt
        }
      }
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: 'Erro ao buscar relat√≥rio'
    });
  }
}

// Reset do relat√≥rio
async function resetOperationReport(userId: string) {
  try {
    if (operationState[userId]) {
      operationState[userId].stats = {
      totalBets: 0,
        wins: 0,
        losses: 0,
        profit: 0,
        startedAt: Date.now()
      };
    }

    // üìä IMPORTANTE: Resetar tamb√©m as estat√≠sticas (sistema simplificado)
    resetAnalysisCounters(userId);

    return NextResponse.json({
      success: true,
      data: { message: 'Relat√≥rio resetado com sucesso' }
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: 'Erro ao resetar relat√≥rio'
    });
  }
}

// Status da conex√£o
async function getConnectionStatus(userId: string) {
  try {
    const status = connectionStatus[userId] || { connected: false, lastUpdate: Date.now() };
    const results = gameResults[userId] || [];
    const operation = operationState[userId];

    return NextResponse.json({
      success: true,
      data: {
        connected: status.connected,
        lastUpdate: status.lastUpdate,
        error: status.error,
        resultsCount: results.length,
        operationActive: operation?.active || false,
        missionCompleted: operation?.missionCompleted || false
      }
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: 'Erro ao verificar status da conex√£o'
    });
  }
}



// Fun√ß√£o para diagn√≥stico do servidor - mostra todos os usu√°rios ativos
// Hist√≥rico simplificado
async function getSessionsHistory(userId: string) {
  return NextResponse.json({
    success: true,
    data: { sessions: [], totals: {}, currentSession: null }
  });
}

async function getServerDiagnostic() {
  return NextResponse.json({
    success: true,
    data: { timestamp: new Date().toISOString(), users: {} }
  });
}

export async function GET(request: NextRequest) {
  return NextResponse.json({
    success: true,
    message: 'MegaRoulette BR Bot API',
    version: '2.1.0'
  });
} 

// üîÑ REMOVIDO: Timer autom√°tico de reconex√£o - agora usa sistema programado baseado em derrota
// function startAutoReconnectionTimer(userId: string) {
//   // Sistema de renova√ß√£o programada substituiu esta fun√ß√£o
// }

// üîÑ NOVO: Fun√ß√£o para parar timer de reconex√£o autom√°tica
function stopAutoReconnectionTimer(userId: string) {
  if (reconnectionTimers[userId]) {
    clearTimeout(reconnectionTimers[userId]);
    delete reconnectionTimers[userId];
    addWebSocketLog(userId, `‚è∞ Timer de reconex√£o autom√°tica parado`, 'info');
  }
}

// üé≤ FUN√á√ÉO: Gerar aposta baseada no modo M4 direto ou padr√£o (vermelho)
function generateBet(userId: string): 'R' | 'B' | 'E' | 'O' | 'L' | 'H' | 'AWAIT' {
  const operation = operationState[userId];
  if (!operation) return 'R';
  
  // üî• NOVO: Sistema simplificado - sempre apostar no tipo configurado
  const betType = operation.m4DirectBetType || 'red';
  
  switch (betType) {
    case 'await': return 'AWAIT';
    case 'red': return 'R';
    case 'black': return 'B';
    case 'even': return 'E';
    case 'odd': return 'O';
    case 'low': return 'L';
    case 'high': return 'H';
    default: return 'R';
  }
}

// üîß NOVO: Sistema de controle de renova√ß√£o para evitar rate limiting
interface RenewalControlState {
  lastRenewalAttempt: number;
  renewalCooldown: number; // Tempo em ms para aguardar entre renova√ß√µes
  consecutiveFailures: number;
  blocked: boolean;
  blockedUntil: number;
}

// Mapa para controlar renova√ß√µes por usu√°rio
const renewalControl: { [userId: string]: RenewalControlState } = {};

// Fun√ß√£o para verificar se pode tentar renovar
function canAttemptRenewal(userId: string): boolean {
  const control = renewalControl[userId];
  if (!control) {
    // Primeira tentativa - permitir
    renewalControl[userId] = {
      lastRenewalAttempt: 0,
      renewalCooldown: 30000, // 30 segundos inicial
      consecutiveFailures: 0,
      blocked: false,
      blockedUntil: 0
    };
    return true;
  }

  const now = Date.now();
  
  // Verificar se est√° bloqueado temporariamente
  if (control.blocked && now < control.blockedUntil) {
    const remainingTime = Math.ceil((control.blockedUntil - now) / 1000);
    addWebSocketLog(userId, `‚è∞ Renova√ß√£o bloqueada temporariamente por ${remainingTime}s (rate limit)`, 'error');
    return false;
  }
  
  // Desbloquear se passou o tempo
  if (control.blocked && now >= control.blockedUntil) {
    control.blocked = false;
    control.renewalCooldown = 30000; // Reset cooldown
    addWebSocketLog(userId, 'üîì Bloqueio tempor√°rio removido - renova√ß√£o permitida', 'info');
  }

  // Verificar cooldown
  const timeSinceLastAttempt = now - control.lastRenewalAttempt;
  if (timeSinceLastAttempt < control.renewalCooldown) {
    const remainingTime = Math.ceil((control.renewalCooldown - timeSinceLastAttempt) / 1000);
    addWebSocketLog(userId, `‚è∞ Aguardando cooldown: ${remainingTime}s at√© pr√≥xima tentativa`, 'error');
    return false;
  }

  return true;
}

// Fun√ß√£o para registrar resultado da renova√ß√£o
function recordRenewalResult(userId: string, success: boolean) {
  const control = renewalControl[userId];
  if (!control) return;

  const now = Date.now();
  control.lastRenewalAttempt = now;

  if (success) {
    // Sucesso - resetar contadores
    control.consecutiveFailures = 0;
    control.renewalCooldown = 30000; // Reset para 30s
    control.blocked = false;
    addWebSocketLog(userId, '‚úÖ Renova√ß√£o bem-sucedida - cooldown resetado', 'success');
  } else {
    // Falha - aumentar cooldown e contador
    control.consecutiveFailures++;
    
    if (control.consecutiveFailures >= 3) {
      // Bloquear temporariamente ap√≥s 3 falhas consecutivas
      control.blocked = true;
      control.blockedUntil = now + (5 * 60 * 1000); // Bloquear por 5 minutos
      addWebSocketLog(userId, 'üö´ Muitas falhas consecutivas - bloqueando renova√ß√µes por 5 minutos', 'error');
    } else {
      // Aumentar cooldown progressivamente
      control.renewalCooldown = Math.min(control.renewalCooldown * 2, 300000); // Max 5 minutos
      addWebSocketLog(userId, `‚è∞ Falha na renova√ß√£o - cooldown aumentado para ${control.renewalCooldown / 1000}s`, 'error');
    }
  }
}

// ‚è∞ Sistema de renova√ß√£o autom√°tica simples - a cada 10 minutos
interface SimpleRenewalState {
  nextRenewalTime: number;
  lastRenewalTime: number;
}

// Mapa para controlar renova√ß√µes autom√°ticas por usu√°rio
const autoRenewal: { [userId: string]: SimpleRenewalState } = {};

// ‚è∞ Fun√ß√£o para inicializar renova√ß√£o autom√°tica
function initializeAutoRenewal(userId: string) {
  const now = Date.now();
  autoRenewal[userId] = {
    nextRenewalTime: now + (10 * 60 * 1000), // 10 minutos
    lastRenewalTime: now
  };
  addWebSocketLog(userId, '‚è∞ Renova√ß√£o autom√°tica iniciada - pr√≥xima em 10 minutos', 'info');
}

// üéØ NOVA FUN√á√ÉO: For√ßar renova√ß√£o imediata ap√≥s resultado
// üéØ NOVA FUN√á√ÉO: Verificar se precisa renovar e aproveitar momento p√≥s-aposta
function shouldRenewAfterBet(userId: string): boolean {
  const renewal = autoRenewal[userId];
  if (!renewal) return false;
  
  const now = Date.now();
  
  // üéØ INTELIGENTE: Se est√° pr√≥ximo do tempo de renova√ß√£o (dentro de 3 minutos)
  const timeUntilRenewal = renewal.nextRenewalTime - now;
  const shouldRenew = timeUntilRenewal <= (3 * 60 * 1000); // 3 minutos ou menos
  
  if (shouldRenew) {
    // Atualizar timer para pr√≥xima renova√ß√£o
    renewal.lastRenewalTime = now;
    renewal.nextRenewalTime = now + (10 * 60 * 1000); // Pr√≥xima em 10 minutos
    
    addWebSocketLog(userId, 'üéØ Aproveitando momento p√≥s-aposta para renovar (~20s at√© resultado)', 'info');
    return true;
  }
  
  return false;
}

function triggerRenewalAfterBet(userId: string) {
  const renewal = autoRenewal[userId];
  if (!renewal) return;
  
  const now = Date.now();
  const timeSinceLastRenewal = now - renewal.lastRenewalTime;
  const minInterval = 8 * 60 * 1000; // M√≠nimo 8 minutos entre renova√ß√µes
  
  // S√≥ renovar se passou tempo suficiente desde a √∫ltima renova√ß√£o
  if (timeSinceLastRenewal >= minInterval) {
    renewal.nextRenewalTime = now; // Renovar imediatamente
    addWebSocketLog(userId, 'üéØ Renova√ß√£o programada p√≥s-aposta', 'info');
  } else {
    // Agendar para o tempo m√≠nimo
    const remainingTime = minInterval - timeSinceLastRenewal;
    renewal.nextRenewalTime = now + remainingTime;
    const minutesLeft = Math.ceil(remainingTime / 60000);
    addWebSocketLog(userId, `‚è≥ Renova√ß√£o em ${minutesLeft} minutos (intervalo m√≠nimo)`, 'info');
  }
}

// ‚è∞ Fun√ß√£o para verificar se deve renovar automaticamente COM INTELIG√äNCIA DE APOSTAS
function shouldRenewAutomatically(userId: string): boolean {
  const renewal = autoRenewal[userId];
  if (!renewal) {
    initializeAutoRenewal(userId);
    return false;
  }

  const now = Date.now();
  
  if (now >= renewal.nextRenewalTime) {
    // üéØ ANTI-DUPLICA√á√ÉO: Verificar se n√£o foi renovado recentemente (√∫ltimos 30 segundos)
    const timeSinceLastRenewal = now - renewal.lastRenewalTime;
    if (timeSinceLastRenewal < 30 * 1000) {
      // Renova√ß√£o muito recente, pular
      return false;
    }
    
    // Renovar e agendar pr√≥xima
    renewal.lastRenewalTime = now;
    renewal.nextRenewalTime = now + (10 * 60 * 1000); // Pr√≥xima em 10 minutos
    
    return true;
  }
  
  return false;
}

// ‚è∞ Fun√ß√£o para limpar renova√ß√£o autom√°tica
function clearAutoRenewal(userId: string) {
  if (autoRenewal[userId]) {
    delete autoRenewal[userId];
    addWebSocketLog(userId, '‚è∞ Renova√ß√£o autom√°tica limpa', 'info');
  }
}

// üöÄ REMOVIDO: Fun√ß√µes para gerenciar progress√£o autom√°tica - funcionalidade removida
// Todas as fun√ß√µes de progress√£o autom√°tica foram removidas:
// - updateProgressionSettings
// - incrementProgressionCounter  
// - applyProgressionStake
// - resetProgressionCounter
// - getProgressionStatus



