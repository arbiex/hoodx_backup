import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// Interface para requisi√ß√£o de aposta
interface BetRequest {
  userId: string;
  amount: number;
  betCode?: string;
  prediction?: 'red' | 'black' | 'green' | 'even' | 'odd' | 'low' | 'high';
  tableId?: string;
  maxWaitTime?: number; // tempo m√°ximo para aguardar abertura (default: 30s)
}

// Interface para resultado da aposta
interface BetResult {
  success: boolean;
  data?: {
    gameId: string;
    betSent: boolean;
    amount: number;
    betCode: string;
    timestamp: number;
    result?: string;
    message: string;
  };
  error?: string;
  logs?: string[];
}

// Mapeamento de predi√ß√µes para c√≥digos
const BET_CODES: { [key: string]: string } = {
  'red': '46',      // Vermelho
  'black': '47',    // Preto  
  'even': '48',     // Par
  'odd': '49',      // √çmpar
  'low': '50',      // 1-18
  'high': '51',     // 19-36
  'green': '0',     // Zero (n√∫mero direto)
  // N√∫meros diretos: '0' a '36'
};

// Fun√ß√£o principal para fazer apostas usando conex√£o ativa
export async function POST(request: NextRequest) {
  try {
    const { userId, amount, betCode, prediction, tableId = 'mrbras531mrbr532', maxWaitTime = 30000 }: BetRequest = await request.json();

    // Valida√ß√µes obrigat√≥rias
    if (!userId) {
      return NextResponse.json({
        success: false,
        error: 'userId √© obrigat√≥rio'
      }, { status: 400 });
    }

    if (!amount || amount < 0.5) {
      return NextResponse.json({
        success: false,
        error: 'Valor m√≠nimo da aposta √© R$ 0,50'
      }, { status: 400 });
    }

    // Determinar c√≥digo da aposta
    let finalBetCode = betCode;
    if (prediction && BET_CODES[prediction]) {
      finalBetCode = BET_CODES[prediction];
    }

    if (!finalBetCode) {
      return NextResponse.json({
        success: false,
        error: 'C√≥digo de aposta (betCode) ou predi√ß√£o (prediction) √© obrigat√≥rio'
      }, { status: 400 });
    }

    // Validar c√≥digo de aposta
    if (!isValidBetCode(finalBetCode)) {
      return NextResponse.json({
        success: false,
        error: `C√≥digo de aposta inv√°lido: ${finalBetCode}`
      }, { status: 400 });
    }

    // 1. Verificar se j√° existe conex√£o ativa para o usu√°rio
    const connectionCheckResult = await checkActiveConnection(userId);
    if (!connectionCheckResult.success) {
      return NextResponse.json({
        success: false,
        error: `Conex√£o n√£o ativa: ${connectionCheckResult.error}. Use primeiro /api/bots/blaze/pragmatic/megaroulettebrazilian com action=bet-connect`
      }, { status: 400 });
    }

    // 2. Aguardar pr√≥xima janela de apostas e enviar aposta via conex√£o ativa
    const betResult = await placeBetViaActiveConnection({
      userId,
      amount,
      betCode: finalBetCode,
      tableId,
      maxWaitTime
    });

    // 3. Se aposta foi bem-sucedida, debitar cr√©ditos
    if (betResult.success && betResult.data?.betSent) {
      await debitUserCredits(userId, amount);
    }

    return NextResponse.json(betResult);

  } catch (error) {
    return NextResponse.json({
      success: false,
      error: 'Erro interno do servidor'
    }, { status: 500 });
  }
}

// Fun√ß√£o para verificar se existe conex√£o ativa (usando a API principal)
async function checkActiveConnection(userId: string): Promise<{ success: boolean; error?: string }> {
  try {
    // Chamar a API principal para verificar logs/status da conex√£o
    const response = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/bots/blaze/pragmatic/megaroulettebrazilian`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId,
        action: 'get-websocket-logs'
      })
    });

    const result = await response.json();

    if (!result.success) {
      return {
        success: false,
        error: result.error || 'N√£o foi poss√≠vel verificar conex√£o'
      };
    }

    const connectionStatus = result.data?.connectionStatus;
    
    if (!connectionStatus?.connected) {
      return {
        success: false,
        error: 'WebSocket n√£o est√° conectado'
      };
    }

    // Verificar se conex√£o est√° saud√°vel (√∫ltimo update recente)
    const timeSinceUpdate = Date.now() - connectionStatus.lastUpdate;
    if (timeSinceUpdate > 60000) { // 1 minuto
      return {
        success: false,
        error: 'Conex√£o pode estar inativa (sem atividade recente)'
      };
    }

    return { success: true };

  } catch (error) {
    return {
      success: false,
      error: `Erro ao verificar conex√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
    };
  }
}

// Fun√ß√£o para fazer aposta via conex√£o WebSocket ativa (integrada com route.ts)
async function placeBetViaActiveConnection(config: {
  userId: string;
  amount: number;
  betCode: string;
  tableId: string;
  maxWaitTime: number;
}): Promise<BetResult> {
  return new Promise(async (resolve) => {
    const logs: string[] = [];
    const startTime = Date.now();
    
    try {
      logs.push('üîó Usando conex√£o WebSocket ativa existente');
      logs.push(`üí∞ Preparando aposta: R$ ${config.amount} no c√≥digo ${config.betCode}`);

      // Vari√°veis de controle
      let bettingWindowDetected = false;
      let betSent = false;
      let currentGameId = '';
      let betResult = '';
      let monitoringActive = true;

      // Timeout de seguran√ßa
      const timeout = setTimeout(() => {
        monitoringActive = false;
        if (!betSent) {
          resolve({
            success: false,
            error: `Timeout - Nenhuma janela de apostas detectada em ${config.maxWaitTime/1000}s`,
            logs
          });
        }
      }, config.maxWaitTime);

      // Fun√ß√£o para monitorar logs e detectar janelas de apostas
      const monitoringInterval = setInterval(async () => {
        if (!monitoringActive) {
          clearInterval(monitoringInterval);
          return;
        }

        try {
          // Buscar logs da conex√£o ativa
          const response = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/bots/blaze/pragmatic/megaroulettebrazilian`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              userId: config.userId,
              action: 'get-websocket-logs'
            })
          });

          const result = await response.json();
          
          if (!result.success) {
            logs.push(`‚ùå Erro ao monitorar conex√£o: ${result.error}`);
            clearTimeout(timeout);
            clearInterval(monitoringInterval);
            resolve({
              success: false,
              error: `Erro no monitoramento: ${result.error}`,
              logs
            });
            return;
          }

          const recentLogs = result.data?.logs || [];
          
          // Procurar por janelas de apostas nos logs recentes (√∫ltimos 10 segundos)
          const recentTime = Date.now() - 10000;
          const relevantLogs = recentLogs.filter((log: any) => log.timestamp > recentTime);

          // 1. DETECTAR ABERTURA DE APOSTAS
          const betsOpenLog = relevantLogs.find((log: any) => 
            log.type === 'bets-open' && log.message.includes('Jogo') && log.message.includes('iniciado')
          );

          if (betsOpenLog && !bettingWindowDetected && !betSent) {
            // Extrair Game ID do log
            const gameIdMatch = betsOpenLog.message.match(/Jogo \d+ iniciado: ([^\s]+)/);
            if (gameIdMatch) {
              currentGameId = gameIdMatch[1];
              bettingWindowDetected = true;
              logs.push(`üéÆ Janela de apostas detectada - Jogo: ${currentGameId}`);
              
              // Aguardar um pouco e ent√£o enviar aposta (timing otimizado)
              setTimeout(async () => {
                await sendBetCommand();
              }, 3000); // 3 segundos ap√≥s detec√ß√£o da abertura
            }
          }

          // 2. DETECTAR FECHAMENTO DE APOSTAS
          const betsClosedLog = relevantLogs.find((log: any) => 
            log.type === 'bets-closed' || log.message.includes('fechadas')
          );

          if (betsClosedLog && betSent) {
            logs.push('üîí Apostas fechadas - Aguardando resultado...');
            
            // Aguardar um pouco para resultado
            setTimeout(async () => {
              clearTimeout(timeout);
              clearInterval(monitoringInterval);
              resolve({
                success: true,
                data: {
                  gameId: currentGameId,
                  betSent: true,
                  amount: config.amount,
                  betCode: config.betCode,
                  timestamp: Date.now(),
                  result: betResult,
                  message: 'Aposta enviada com sucesso via conex√£o ativa'
                },
                logs
              });
            }, 5000); // 5 segundos para aguardar resultado
          }

          // 3. DETECTAR RESULTADO
          const gameResultLog = relevantLogs.find((log: any) => 
            log.type === 'game' && log.message.includes('Resultado:')
          );

          if (gameResultLog && betSent) {
            betResult = gameResultLog.message;
            logs.push(`üéØ ${betResult}`);
            
            clearTimeout(timeout);
            clearInterval(monitoringInterval);
            resolve({
              success: true,
              data: {
                gameId: currentGameId,
                betSent: true,
                amount: config.amount,
                betCode: config.betCode,
                timestamp: Date.now(),
                result: betResult,
                message: 'Aposta enviada e resultado recebido'
              },
              logs
            });
          }

        } catch (monitorError) {
          logs.push(`‚ùå Erro no monitoramento: ${monitorError}`);
        }
      }, 2000); // Verificar a cada 2 segundos

      // Fun√ß√£o para enviar comando de aposta via API principal
      async function sendBetCommand() {
        try {
          if (!currentGameId || betSent) {
            logs.push(`‚ùå N√£o √© poss√≠vel apostar: gameId=${currentGameId}, betSent=${betSent}`);
            return;
          }

          logs.push(`üì§ Enviando aposta via conex√£o ativa...`);

          // Usar a funcionalidade de aposta da API principal
          const response = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/bots/blaze/pragmatic/megaroulettebrazilian`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              userId: config.userId,
              action: 'bet-place',
              betData: {
                amount: config.amount,
                betCode: config.betCode,
                tableId: config.tableId
              }
            })
          });

          const result = await response.json();

          if (result.success) {
            betSent = true;
            logs.push('‚úÖ Aposta enviada com sucesso via API principal');
          } else {
            logs.push(`‚ùå Erro ao enviar aposta: ${result.error}`);
            clearTimeout(timeout);
            clearInterval(monitoringInterval);
            resolve({
              success: false,
              error: `Erro ao enviar aposta: ${result.error}`,
              logs
            });
          }

        } catch (sendError) {
          logs.push(`‚ùå Erro ao enviar aposta: ${sendError}`);
          clearTimeout(timeout);
          clearInterval(monitoringInterval);
          resolve({
            success: false,
            error: `Erro ao enviar aposta: ${sendError instanceof Error ? sendError.message : 'Erro desconhecido'}`,
            logs
          });
        }
      }

    } catch (error) {
      logs.push(`‚ùå Erro geral: ${error}`);
      resolve({
        success: false,
        error: `Erro geral: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
        logs
      });
    }
  });
}

// Validar c√≥digo de aposta conforme RESUMO
function isValidBetCode(betCode: string): boolean {
  // C√≥digos externos v√°lidos (46-51)
  const externalCodes = ['46', '47', '48', '49', '50', '51'];
  
  // N√∫meros diretos (0-36)
  const numberCodes = Array.from({ length: 37 }, (_, i) => i.toString());
  
  const validCodes = [...externalCodes, ...numberCodes];
  
  return validCodes.includes(betCode);
}

// Fun√ß√£o para debitar cr√©ditos do usu√°rio
async function debitUserCredits(userId: string, amount: number) {
  try {
    // Implementar integra√ß√£o com sistema de cr√©ditos
    return { success: true };
  } catch (error) {
    return { success: false };
  }
}

// M√©todo GET para documenta√ß√£o da API
export async function GET(request: NextRequest) {
  return NextResponse.json({
    success: true,
    message: 'API de Apostas Integrada - MegaRoulette Brazilian',
    version: '2.0.0',
    description: 'API de apostas que utiliza conex√£o WebSocket ativa mantida pela API principal (route.ts)',
    integration: {
      requires: 'Conex√£o WebSocket ativa via /api/bots/blaze/pragmatic/megaroulettebrazilian (action=bet-connect)',
      benefits: [
        'Reutiliza conex√£o existente (mais eficiente)',
        'N√£o precisa reautenticar',
        'Aproveita sistema de reconex√£o autom√°tica',
        'Integra com logs existentes',
        'Menor lat√™ncia para apostas'
      ]
    },
    usage: {
      step1: 'POST /api/bots/blaze/pragmatic/megaroulettebrazilian (action=bet-connect) - Estabelecer conex√£o',
      step2: 'POST /api/bots/blaze/pragmatic/megaroulettebrazilian/bet - Fazer apostas usando conex√£o ativa',
      endpoint: 'POST /api/bots/blaze/pragmatic/megaroulettebrazilian/bet',
      body: {
        userId: 'string (obrigat√≥rio) - ID ou email do usu√°rio',
        amount: 'number (obrigat√≥rio) - Valor da aposta (m√≠nimo R$ 0,50)',
        betCode: 'string (opcional se prediction fornecido) - C√≥digo direto da aposta',
        prediction: 'string (opcional se betCode fornecido) - red|black|even|odd|low|high|green',
        tableId: 'string (opcional) - ID da mesa (padr√£o: mrbras531mrbr532)',
        maxWaitTime: 'number (opcional) - Tempo m√°ximo de espera em ms (padr√£o: 30000)'
      }
    },
    bet_codes: {
      external: {
        '46': 'Vermelho (Red)',
        '47': 'Preto (Black)',
        '48': 'Par (Even)',
        '49': '√çmpar (Odd)',
        '50': '1-18 (Low)',
        '51': '19-36 (High)'
      },
      direct: 'N√∫meros 0-36 para apostas diretas'
    },
    workflow: [
      '1. Verificar se conex√£o WebSocket est√° ativa',
      '2. Monitorar logs da conex√£o ativa em tempo real',
      '3. Detectar abertura de apostas via logs',
      '4. Enviar aposta usando API principal',
      '5. Monitorar fechamento e resultado via logs',
      '6. Retornar resultado completo'
    ],
    advantages: [
      'N√£o cria conex√µes desnecess√°rias',
      'Aproveita infraestrutura de reconex√£o',
      'Timing otimizado baseado em logs reais',
      'Menor chance de conflitos',
      'Sistema mais robusto e eficiente'
    ]
  });
} 