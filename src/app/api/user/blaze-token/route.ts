import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

export async function GET(request: Request) {
  try {
    // Criar cliente Supabase
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY! // Usar anon key em vez de service role
    );
    
    // Tentar buscar usu√°rio via cookie de autoriza√ß√£o
    const authHeader = request.headers.get('authorization') || 
                      request.headers.get('cookie')?.match(/sb-.*-auth-token=([^;]+)/)?.[1];
    
    if (authHeader) {
      const token = authHeader.replace('Bearer ', '');
      const { data: { user }, error: userError } = await supabase.auth.getUser(token);
      
      if (!userError && user) {
        console.log('‚úÖ [BLAZE-TOKEN] Usu√°rio autenticado via header:', user.id);
        return await fetchUserToken(supabase, user.id);
      }
    }
    
    // Fallback: buscar via query parameter (√∫ltimo caso)
    const url = new URL(request.url);
    const userId = url.searchParams.get('userId');
    
    if (userId) {
      console.log('‚úÖ [BLAZE-TOKEN] Usando userId via query param:', userId);
      return await fetchUserToken(supabase, userId);
    }

    console.error('‚ùå [BLAZE-TOKEN] Nenhum m√©todo de autentica√ß√£o funcionou');
    return NextResponse.json({
      success: false,
      error: 'Usu√°rio n√£o autenticado - nenhum token v√°lido encontrado'
    }, { status: 401 });

  } catch (error) {
    console.error('‚ùå [BLAZE-TOKEN] Erro geral:', error);
    return NextResponse.json({
      success: false,
      error: 'Erro interno do servidor'
    }, { status: 500 });
  }
}

async function fetchUserToken(supabase: any, userId: string) {
  try {
    console.log('üîç [BLAZE-TOKEN] Buscando token para usu√°rio:', userId);

    // Buscar token da Blaze do usu√°rio
    const { data: tokenData, error: tokenError } = await supabase
      .from('user_tokens')
      .select('token')
      .eq('casino_code', 'BLAZE')
      .eq('user_id', userId)
      .eq('is_active', true)
      .single();

    if (tokenError || !tokenData?.token) {
      console.error('‚ùå [BLAZE-TOKEN] Token n√£o encontrado:', tokenError);
      return NextResponse.json({
        success: false,
        error: 'Token da Blaze n√£o encontrado. Configure seu token na p√°gina de configura√ß√µes.'
      }, { status: 404 });
    }

    console.log('‚úÖ [BLAZE-TOKEN] Token encontrado com sucesso');
    return NextResponse.json({
      success: true,
      token: tokenData.token
    });

  } catch (error) {
    console.error('‚ùå [BLAZE-TOKEN] Erro ao buscar token:', error);
    return NextResponse.json({
      success: false,
      error: 'Erro interno do servidor'
    }, { status: 500 });
  }
} 