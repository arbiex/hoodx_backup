'use client'

import React, { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import Image from 'next/image'

import { CreditCard, Zap, Crown, Shield, Star, Banknote, Copy, QrCode, CheckCircle } from 'lucide-react'
import Modal, { useModal } from '@/components/ui/modal'
import CollapsibleSection from '@/components/ui/collapsible-section'
import { toast } from 'sonner'
import { useCredits } from '@/hooks/useCredits'
import { useAuth } from '@/hooks/useAuth'
import XGatePaymentModal from './XGatePaymentModal'

interface CreditPlansProps {
  showTitle?: boolean
  compact?: boolean
  maxPlans?: number
}

export default function CreditPlans({ showTitle = true, compact = false, maxPlans }: CreditPlansProps) {
  const [selectedPackage, setSelectedPackage] = useState<string | null>(null)
  const [pixKey, setPixKey] = useState('')
  const [pixCopiaCola, setPixCopiaCola] = useState('')
  const [qrCodeData, setQrCodeData] = useState('')
  const [loadingPixData, setLoadingPixData] = useState(false)
  const [xgateModalOpen, setXgateModalOpen] = useState(false)
  const [paymentAmount, setPaymentAmount] = useState(0)
  const { packages, purchaseCredits, loading, refresh } = useCredits()
  const { user } = useAuth()
  const pixModal = useModal()
  const successModal = useModal()

  // Icon mapping
  const iconMap = {
    'Zap': Zap,
    'Star': Star,
    'Shield': Shield,
    'Crown': Crown
  }

  // Convert packages from database to component format
  const creditPackages = packages.map(pkg => ({
    id: pkg.id,
    amount: pkg.base_value,
    title: pkg.name,
    description: pkg.description || '',
    icon: iconMap[pkg.icon_name as keyof typeof iconMap] || Zap,
    color: pkg.color_theme
  }))

  const displayPackages = maxPlans ? creditPackages.slice(0, maxPlans) : creditPackages

  const handlePurchase = async (packageData: typeof creditPackages[0]) => {
    if (!user) {
      toast.error('Você precisa estar logado para comprar créditos')
      return
    }
    
    setSelectedPackage(packageData.id)
    setPaymentAmount(packageData.amount)
    setXgateModalOpen(true)
  }

  // Mantendo a função original para compatibilidade com PIX simulado
  const handlePurchaseSimulated = async (packageData: typeof creditPackages[0]) => {
    setSelectedPackage(packageData.id)
    setLoadingPixData(true)
    pixModal.openModal()
    
    // Simulate loading time for PIX data generation
    await new Promise(resolve => setTimeout(resolve, 1500))
    
    // Generate simulated PIX key and PIX copia e cola
    const simulatedPixKey = `${Math.random().toString(36).substr(2, 9)}@hoodx.ai`
    setPixKey(simulatedPixKey)
    
    // Generate PIX copia e cola (EMV format simulation)
    const pixPayload = `00020126580014br.gov.bcb.pix0136${simulatedPixKey}520400005303986540${packageData.amount.toFixed(2)}5802BR5909HOODX LTD6009SAO PAULO62070503***6304`
    setPixCopiaCola(pixPayload)
    
    // Generate QR code data URL (this would normally be generated by a QR code library)
    const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(pixPayload)}`
    setQrCodeData(qrCodeUrl)
    
    setLoadingPixData(false)
  }

  const completePixPurchase = async () => {
    const pkg = creditPackages.find(p => p.id === selectedPackage)
    if (pkg) {
      try {
        // Add some realistic processing time for payment verification
        await new Promise(resolve => setTimeout(resolve, 2000))
        
        // For now, simulate payment verification and add credits directly
        // In production, this will be called only after gateway confirms payment
        
        try {
          // Actually add the credits to the database and create transaction history
          const result = await purchaseCredits(pkg.id, pixKey)
          
                     if (result.success) {
            // Close PIX modal and show success
            pixModal.closeModal()
            successModal.openModal()
            
            // Show success toast
            toast.success(`CRÉDITOS_ADICIONADOS_COM_SUCESSO`, {
              description: `+R$ ${pkg.amount.toFixed(2)} adicionados à sua conta`,
            })
            
            // Force refresh of all data with a small delay to ensure DB consistency
            setTimeout(() => {
              refresh()
              
              // Dispatch custom event to notify other pages about credit update
              window.dispatchEvent(new CustomEvent('credits-updated', {
                detail: { amount: pkg.amount, type: 'purchase' }
              }))
            }, 500)
          } else {
            toast.error(`COMPRA_FALHOU`, {
              description: result.error || 'Falha ao adicionar créditos',
            })
          }
        } catch (purchaseError) {
          console.error('Error adding credits:', purchaseError)
          toast.error(`FALHA_ADIÇÃO_CRÉDITOS`, {
            description: 'Falha ao adicionar créditos à conta',
          })
        }
      } catch (error) {
        console.error('Purchase error:', error)
        toast.error(`ERRO_COMPRA`, {
          description: 'Erro interno durante a compra',
        })
      }
    }
  }

  const resetStates = () => {
    setSelectedPackage(null)
    setPixKey('')
    setPixCopiaCola('')
    setQrCodeData('')
    setLoadingPixData(false)
  }

  // Função para lidar com sucesso do pagamento XGATE
  const handleXGatePaymentSuccess = (amount: number, transactionId: string) => {
    // Fechar modal XGATE
    setXgateModalOpen(false)
    
    // Mostrar modal de sucesso
    successModal.openModal()
    
    // Mostrar toast de sucesso
    toast.success(`PAGAMENTO_CONFIRMADO_XGATE`, {
      description: `+R$ ${amount.toFixed(2)} adicionados à sua conta`,
    })
    
    // Refresh dos dados com delay para garantir consistência do DB
    setTimeout(() => {
      refresh()
      
      // Dispatch evento customizado para notificar outras páginas
      window.dispatchEvent(new CustomEvent('credits-updated', {
        detail: { amount, type: 'purchase', transactionId }
      }))
    }, 500)
  }

  const handleSuccessClose = () => {
    successModal.closeModal()
    resetStates()
    // Force refresh of all credit data to update UI
    refresh()
  }

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      toast.success('COPIADO_PARA_ÁREA_TRANSFERÊNCIA', { description: text })
    } catch (error) {
      toast.error('FALHA_CÓPIA', { description: 'Não foi possível copiar para área de transferência' })
    }
  }

  const getColorClasses = (color: string) => {
    switch (color) {
      case 'blue': return 'border-blue-500/30 shadow-blue-500/20 text-blue-400 bg-blue-500/5'
      case 'green': return 'border-green-500/30 shadow-green-500/20 text-green-400 bg-green-500/5'
      case 'purple': return 'border-purple-500/30 shadow-purple-500/20 text-purple-400 bg-purple-500/5'
      case 'yellow': return 'border-yellow-500/30 shadow-yellow-500/20 text-yellow-400 bg-yellow-500/5'
      default: return 'border-green-500/30 shadow-green-500/20 text-green-400 bg-green-500/5'
    }
  }

  const selectedPkg = creditPackages.find(p => p.id === selectedPackage)

  const CardWrapper = ({ children }: { children: React.ReactNode }) => {
    if (!showTitle) {
      return <>{children}</>
    }
    
    return (
      <Card className="border-green-500/30 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-green-400 font-mono flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            PACOTES_CRÉDITOS
          </CardTitle>
          <CardDescription className="text-gray-400 font-mono text-xs">
            {`// Compre pacotes de créditos para financiar suas operações`}
          </CardDescription>
        </CardHeader>
        <CardContent>
          {children}
        </CardContent>
      </Card>
    )
  }

  return (
    <>
      <CardWrapper>
        {packages.length === 0 && loading ? (
          <div className={`grid grid-cols-1 ${compact ? 'md:grid-cols-2' : 'md:grid-cols-2 lg:grid-cols-4'} gap-4`}>
            {Array.from({ length: maxPlans || 4 }).map((_, index) => (
              <div key={index} className="relative p-4 rounded-xl border border-gray-500/30 bg-gray-500/5 animate-pulse">
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <div className={`${compact ? 'h-5 w-5' : 'h-6 w-6'} bg-gray-400/50 rounded`}></div>
                      <div className="h-4 bg-gray-400/30 rounded w-20"></div>
                    </div>
                    <div className="h-5 bg-gray-400/30 rounded w-16"></div>
                  </div>
                  <div className={`h-8 bg-gray-400/30 rounded w-full`}></div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className={`grid grid-cols-1 ${compact ? 'md:grid-cols-2' : 'md:grid-cols-2 lg:grid-cols-4'} gap-4`}>
            {displayPackages.map((pkg) => {
              const Icon = pkg.icon
              const colorClasses = getColorClasses(pkg.color)
              
              return (
                <div key={pkg.id} className={`relative p-4 rounded-xl border shadow-lg ${colorClasses} hover:shadow-xl transition-all duration-300`}>
                  <div className="space-y-3">
                    {/* Header with icon, title and amount */}
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Icon className={`${compact ? 'h-5 w-5' : 'h-6 w-6'}`} />
                        <h3 className={`${compact ? 'text-xs' : 'text-sm'} font-bold font-mono`}>
                          {pkg.title}
                        </h3>
                      </div>
                      <div className={`${compact ? 'text-sm' : 'text-lg'} font-bold font-mono`}>
                        R$ {pkg.amount}
                      </div>
                    </div>
                    
                    <Button 
                      onClick={() => handlePurchase(pkg)}
                      className={`w-full bg-green-500/20 border border-green-500/50 text-green-400 hover:bg-green-500/30 font-mono ${compact ? 'text-xs py-2' : ''}`}
                      variant="outline"
                      disabled={loading}
                    >
                      {loading ? 'PROCESSANDO...' : 'COMPRAR'}
                    </Button>
                  </div>
                </div>
              )
            })}
          </div>
        )}
      </CardWrapper>

      {/* PIX Payment Modal */}
      <Modal
        isOpen={pixModal.isOpen}
        onClose={() => {
          pixModal.closeModal()
          resetStates()
        }}
        title="PAGAMENTO_PIX"
        description="Complete sua compra via transferência PIX"
        type="info"
      >
        <div className="space-y-6">
          {selectedPkg && (
            <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <selectedPkg.icon className="h-6 w-6 text-green-400" />
                  <h3 className="text-lg font-bold text-green-400 font-mono">{selectedPkg.title}</h3>
                </div>
                <div className="text-xl font-bold text-green-400 font-mono">
                  R$ {selectedPkg.amount.toFixed(2)}
                </div>
              </div>
            </div>
          )}



          {/* QR Code and PIX Copia e Cola Section */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* QR Code */}
            <div className="bg-gray-800/50 border border-gray-600 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-3">
                <QrCode className="h-5 w-5 text-blue-400" />
                <span className="font-semibold text-blue-400 font-mono text-sm">CÓDIGO_QR</span>
              </div>
              <div className="flex justify-center">
                {loadingPixData ? (
                  <div className="w-40 h-40 bg-gray-700/50 rounded-lg flex items-center justify-center animate-pulse">
                    <div className="text-center">
                      <QrCode className="h-20 w-20 text-gray-500 animate-pulse mx-auto mb-2" />
                      <div className="text-xs text-gray-500 font-mono">Gerando...</div>
                    </div>
                  </div>
                ) : qrCodeData ? (
                  <Image 
                    src={qrCodeData} 
                    alt="PIX QR Code" 
                    width={160}
                    height={160}
                    className="w-40 h-40 bg-white p-2 rounded-lg"
                    unoptimized
                  />
                ) : (
                  <div className="w-40 h-40 bg-gray-700 rounded-lg flex items-center justify-center">
                    <QrCode className="h-20 w-20 text-gray-500" />
                  </div>
                )}
              </div>
              <p className="text-xs text-gray-400 font-mono text-center mt-2">
                {loadingPixData ? 'Preparando código QR...' : 'Escaneie com o app do seu banco'}
              </p>
            </div>

            {/* PIX Copia e Cola */}
            <div className="bg-gray-800/50 border border-gray-600 rounded-lg p-4 flex flex-col">
              <div className="flex items-center gap-2 mb-3">
                <Copy className="h-5 w-5 text-green-400" />
                <span className="font-semibold text-green-400 font-mono text-sm">PIX_COPIA_E_COLA</span>
              </div>
              <div className="flex flex-col flex-1 space-y-2">
                {loadingPixData ? (
                  <>
                    <div className="w-full flex-1 min-h-[120px] p-2 bg-gray-900/50 border border-gray-600 rounded animate-pulse">
                      <div className="space-y-2">
                        <div className="h-3 bg-gray-600/50 rounded w-full animate-pulse"></div>
                        <div className="h-3 bg-gray-600/50 rounded w-4/5 animate-pulse"></div>
                        <div className="h-3 bg-gray-600/50 rounded w-3/4 animate-pulse"></div>
                        <div className="h-3 bg-gray-600/50 rounded w-full animate-pulse"></div>
                        <div className="h-3 bg-gray-600/50 rounded w-2/3 animate-pulse"></div>
                      </div>
                      <div className="text-center mt-4">
                        <div className="text-xs text-gray-500 font-mono">Gerando código PIX...</div>
                      </div>
                    </div>
                    <Button
                      disabled
                      className="w-full bg-gray-500/20 border border-gray-500/50 text-gray-500 font-mono text-xs"
                      variant="outline"
                      size="sm"
                    >
                      <Copy className="h-4 w-4 mr-2" />
                      GERANDO...
                    </Button>
                  </>
                ) : (
                  <>
                    <textarea 
                      value={pixCopiaCola}
                      readOnly
                      className="w-full flex-1 min-h-[120px] p-2 bg-gray-900/50 border border-gray-600 rounded text-xs font-mono text-green-400 resize-none"
                      placeholder="Código PIX aparecerá aqui..."
                    />
                    <Button
                      onClick={() => copyToClipboard(pixCopiaCola)}
                      className="w-full bg-green-500/20 border border-green-500/50 text-green-400 hover:bg-green-500/30 font-mono text-xs"
                      variant="outline"
                      size="sm"
                    >
                      <Copy className="h-4 w-4 mr-2" />
                      COPIAR_CÓDIGO_PIX
                    </Button>
                  </>
                )}
              </div>
            </div>
          </div>

          <CollapsibleSection
            title="INSTRUÇÕES_PAGAMENTO"
            icon={<Banknote />}
          >
            <p>1. Abra o app do seu banco ou carteira digital</p>
            <p>2. Escolha um dos métodos de pagamento:</p>
            <p className="pl-4">• Escaneie o QR Code acima, OU</p>
            <p className="pl-4">• Copie o código PIX copia e cola</p>
            <p>3. Envie exatamente o valor mostrado</p>
            <p>4. Clique em &quot;EU PAGUEI&quot; após completar a transferência</p>
          </CollapsibleSection>

          <div className="flex gap-3">
            <Button
              onClick={() => {
                pixModal.closeModal()
                resetStates()
              }}
              variant="outline"
              className="flex-1 border-gray-600 text-gray-400 hover:text-white"
            >
              CANCELAR
            </Button>
            <Button
              onClick={completePixPurchase}
              className="flex-1 bg-green-500/20 border border-green-500/50 text-green-400 hover:bg-green-500/30"
              disabled={loading}
            >
              {loading ? (
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 border-2 border-green-400 border-t-transparent rounded-full animate-spin"></div>
                  PROCESSANDO...
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  EU_PAGUEI
                </div>
              )}
            </Button>
          </div>
        </div>
      </Modal>

      {/* Success Payment Modal */}
      <Modal
        isOpen={successModal.isOpen}
        onClose={handleSuccessClose}
        title=""
        description=""
        type="success"
      >
        <div className="text-center space-y-6">
          {/* Success Animation Header */}
          <div className="relative">
            <div className="mx-auto w-20 h-20 bg-green-500/20 rounded-full flex items-center justify-center mb-4">
              <CheckCircle className="h-10 w-10 text-green-400" />
            </div>
          </div>

          {/* Success Message */}
          <div className="space-y-2">
            <h2 className="text-2xl font-bold text-green-400 font-mono">
              PAGAMENTO_REALIZADO!
            </h2>
            <p className="text-gray-300 font-mono text-sm">
              Seus créditos foram adicionados à sua conta
            </p>
          </div>

          {/* Transaction Details */}
          {selectedPkg && (
            <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4 space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <selectedPkg.icon className="h-6 w-6 text-green-400" />
                  <span className="font-semibold text-green-400 font-mono">{selectedPkg.title}</span>
                </div>
                <span className="text-green-400 font-bold font-mono">
                  R$ {selectedPkg.amount.toFixed(2)}
                </span>
              </div>
              
              <div className="border-t border-green-500/20 pt-3">
                <div className="flex items-center justify-between text-sm font-mono">
                  <span className="text-gray-400">CRÉDITOS_ADICIONADOS:</span>
                  <span className="text-green-400 font-bold">
                    +R$ {selectedPkg.amount.toFixed(2)}
                  </span>
                </div>
                <div className="flex items-center justify-between text-sm font-mono mt-1">
                  <span className="text-gray-400">MÉTODO_PAGAMENTO:</span>
                  <span className="text-blue-400">PIX</span>
                </div>
                <div className="flex items-center justify-between text-sm font-mono mt-1">
                  <span className="text-gray-400">ID_TRANSAÇÃO:</span>
                  <span className="text-gray-300 text-xs">
                    #{Math.random().toString(36).substr(2, 8).toUpperCase()}
                  </span>
                </div>
              </div>
            </div>
          )}

          {/* Success Actions */}
          <div className="space-y-3">
            <div className="flex items-center gap-2 justify-center text-sm text-gray-400 font-mono">
              <CheckCircle className="h-4 w-4 text-green-400" />
              <span>Transação processada com sucesso</span>
            </div>
            
            <Button
              onClick={handleSuccessClose}
              className="w-full bg-green-500/20 border border-green-500/50 text-green-400 hover:bg-green-500/30 font-mono"
              variant="outline"
            >
              VAMOS_LÁ
            </Button>
          </div>
        </div>
      </Modal>

      {/* Modal de Pagamento XGATE */}
      {user && (
        <XGatePaymentModal
          isOpen={xgateModalOpen}
          onClose={() => setXgateModalOpen(false)}
          onSuccess={handleXGatePaymentSuccess}
          title="PAGAMENTO_PIX_XGATE"
          description="Complete sua compra via PIX - Sistema XGATE Global"
          amount={paymentAmount}
          userId={user.id}
        />
      )}
    </>
  )
} 